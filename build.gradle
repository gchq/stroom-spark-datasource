/*
 * Copyright 2019 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    if(JavaVersion.current() != JavaVersion.VERSION_1_8)
        throw new GradleException("This build requires Java 8. Current SDK version is "+JavaVersion.current())
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id "ca.cutterslade.analyze" version "1.6.0"
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
//apply plugin: 'ca.cutterslade.analyze'

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.versions = [
        //----------This project-----------------------
        stroomSparkDatasource: getPropertyOrDefault('version', 'v2.0-alpha.1'),


        //-------------3rd party libs-----------------
        jackson           : '2.9.9',

        javax_rs: '2.0.1',

        slf4j : '1.7.25',
        spark : '2.12:2.4.7',
        swagger : '2.1.7',

        //--------Leave at end----------------------
        zzDUMMYzz       : 'makes sorting this list easier'
]

// dependency strings for use in sub projects
ext.libs = [

        //------------3rd-party------------
        assertj_core        : 'org.assertj:assertj-core:3.10.0',

        jackson_annotations : "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
        jackson_core        : "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
        jackson_databind    : "com.fasterxml.jackson.core:jackson-databind:$versions.jackson",

        javax_rs            : "javax.ws.rs:javax.ws.rs-api:$versions.javax_rs",

        jersey_client       : "org.glassfish.jersey.core:jersey-client:$versions.jersey",
        jersey_server       : "org.glassfish.jersey.core:jersey-server:$versions.jersey",
        jetty_http          : "org.eclipse.jetty:jetty-http:$versions.jetty",
        junit_jupiter_api   : "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
        junit_jupiter_engine: "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",

        mockito_core        : "org.mockito:mockito-core:2.23.4",

        spark_catalyst               : "org.apache.spark:spark-catalyst_$versions.spark",
        spark_sql               : "org.apache.spark:spark-sql_$versions.spark",
        spark_unsafe               : "org.apache.spark:spark-unsafe_$versions.spark",
        slf4j_api           : "org.slf4j:slf4j-api:$versions.slf4j",
        swagger_annotations            : "io.swagger.core.v3:swagger-annotations:$versions.swagger",

        //--------Leave at end----------------------
        zzDUMMYzz           : "makes sorting easier"
]

ext.moduleName = 'stroom.spark-datasource'

group = 'stroom'
version = versions.stroomSparkDatasource

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    maven { url "https://repo1.maven.org/maven2" }
    jcenter()
    maven {
        url "https://dl.bintray.com/stroom/stroom"
    }
}

dependencies {
    compile project('client')
    // https://mvnrepository.com/artifact/org.apache.spark/spark-sql
    //compile group: 'org.apache.spark', name: 'spark-sql_2.12', version: "${versions.spark}"
    implementation "${libs.spark_catalyst}"
    implementation "${libs.spark_sql}"
    implementation "${libs.spark_unsafe}"

    compile "${libs.slf4j_api}"
    compile "${libs.jackson_annotations}"
    compile "${libs.jackson_core}"
    compile "${libs.jackson_databind}"
    compile "${libs.javax_rs}"
//    compileOnly "${libs.swagger_annotations}"

    testCompileOnly "org.assertj:assertj-core:3.18.1"
    testCompileOnly "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testImplementation "org.assertj:assertj-core:3.18.1"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.2"
    testRuntimeOnly "org.slf4j:slf4j-nop:1.7.25"
}

test {
    useJUnitPlatform()
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        url "https://github.com/stroom/stroom-spark-datasource"
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyLibs(type: Copy) {
    into "$buildDir/runlibs"
    from configurations.compile
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.children().last() + pomConfig
            }
        }
    }
}

//configuration for the bintray plugin for uploading maven artefacts to bintray
//see https://github.com/bintray/gradle-bintray-plugin
//run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
bintray {
    //Must never write these to log or system out
    user = System.getenv('BINTRAY_USER') //set in Travis UI
    key = System.getenv('BINTRAY_KEY') //set in Travis UI

    //The maven plugin publications to push to bintray
    publications = ['mavenJava']

    publish = true

    pkg {
        repo = 'stroom'
        name = 'stroom-spark-datasource'
        userOrg = 'stroom'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/gchq/stroom-spark-datasource.git'
        version {
            name = "${versions.stroomSparkDatasource}"
            desc = "stroom-spark-datasource-${versions.stroomSparkDatasource}"
            released = new Date()
            vcsTag = "${versions.stroomSparkDatasource}"
            gpg {
                //Bintray will self-sign the files
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
}

afterEvaluate {
    repositories {
        jcenter()
    }



    jar {
        inputs.property("moduleName", moduleName)
        manifest {
            attributes(
                    "Automatic-Module-Name": moduleName,
            )
        }
    }
}
