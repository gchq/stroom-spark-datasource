/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DashboardDoc;
import io.swagger.client.model.DashboardSearchResponse;
import io.swagger.client.model.DownloadQueryRequest;
import io.swagger.client.model.DownloadSearchResultsRequest;
import io.swagger.client.model.FunctionSignature;
import io.swagger.client.model.ResourceGeneration;
import io.swagger.client.model.SearchBusPollRequest;
import io.swagger.client.model.ValidateExpressionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsApi
 */
@Ignore
public class DashboardsApiTest {

    private final DashboardsApi api = new DashboardsApi();

    /**
     * Download a query
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDashboardQueryTest() throws ApiException {
        DownloadQueryRequest body = null;
        ResourceGeneration response = api.downloadDashboardQuery(body);

        // TODO: test validations
    }
    /**
     * Download search results
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDashboardSearchResultsTest() throws ApiException {
        DownloadSearchResultsRequest body = null;
        ResourceGeneration response = api.downloadDashboardSearchResults(body);

        // TODO: test validations
    }
    /**
     * Fetch a dashboard doc by its UUID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchDashboardTest() throws ApiException {
        String uuid = null;
        DashboardDoc response = api.fetchDashboard(uuid);

        // TODO: test validations
    }
    /**
     * Fetch all expression functions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchDashboardFunctionsTest() throws ApiException {
        List<FunctionSignature> response = api.fetchDashboardFunctions();

        // TODO: test validations
    }
    /**
     * Fetch time zone data from the server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchTimeZonesTest() throws ApiException {
        List<String> response = api.fetchTimeZones();

        // TODO: test validations
    }
    /**
     * Poll for new search results
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollDashboardSearchResultsTest() throws ApiException {
        SearchBusPollRequest body = null;
        List<DashboardSearchResponse> response = api.pollDashboardSearchResults(body);

        // TODO: test validations
    }
    /**
     * Update a dashboard doc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDashboardTest() throws ApiException {
        DashboardDoc body = null;
        String uuid = null;
        DashboardDoc response = api.updateDashboard(body, uuid);

        // TODO: test validations
    }
    /**
     * Validate an expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateDashboardExpressionTest() throws ApiException {
        String body = null;
        ValidateExpressionResult response = api.validateDashboardExpression(body);

        // TODO: test validations
    }
}
