/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateTokenRequest;
import io.swagger.client.model.SearchTokenRequest;
import io.swagger.client.model.Token;
import io.swagger.client.model.TokenConfig;
import io.swagger.client.model.TokenResultPage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeysApi
 */
@Ignore
public class ApiKeysApiTest {

    private final ApiKeysApi api = new ApiKeysApi();

    /**
     * Create a new token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        CreateTokenRequest body = null;
        Token response = api.createToken(body);

        // TODO: test validations
    }
    /**
     * Delete all tokens.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllTokensTest() throws ApiException {
        Integer response = api.deleteAllTokens();

        // TODO: test validations
    }
    /**
     * Delete a token by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenTest() throws ApiException {
        Integer id = null;
        Integer response = api.deleteToken(id);

        // TODO: test validations
    }
    /**
     * Delete a token by the token string itself.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenByContentTest() throws ApiException {
        String token = null;
        Integer response = api.deleteTokenByContent(token);

        // TODO: test validations
    }
    /**
     * Read a token by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchTokenTest() throws ApiException {
        Integer id = null;
        Token response = api.fetchToken(id);

        // TODO: test validations
    }
    /**
     * Read a token by the token string itself.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchTokenByContentTest() throws ApiException {
        String token = null;
        Token response = api.fetchTokenByContent(token);

        // TODO: test validations
    }
    /**
     * Get the token configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchTokenConfigTest() throws ApiException {
        TokenConfig response = api.fetchTokenConfig();

        // TODO: test validations
    }
    /**
     * Provides access to this service&#x27;s current public key. A client may use these keys to verify JWTs issued by this service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicKeyTest() throws ApiException {
        String response = api.getPublicKey();

        // TODO: test validations
    }
    /**
     * Get all tokens.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTokensTest() throws ApiException {
        TokenResultPage response = api.listTokens();

        // TODO: test validations
    }
    /**
     * Provides access to this service&#x27;s current public key. A client may use these keys to verify JWTs issued by this service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void openIdCertsTest() throws ApiException {
        Map<String, List<Map<String, Object>>> response = api.openIdCerts();

        // TODO: test validations
    }
    /**
     * Provides discovery for openid configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void openIdConfigurationTest() throws ApiException {
        String response = api.openIdConfiguration();

        // TODO: test validations
    }
    /**
     * Submit a search request for tokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTokensTest() throws ApiException {
        SearchTokenRequest body = null;
        TokenResultPage response = api.searchTokens(body);

        // TODO: test validations
    }
    /**
     * Enable or disable the state of a token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleTokenEnabledTest() throws ApiException {
        Integer id = null;
        Boolean enabled = null;
        Integer response = api.toggleTokenEnabled(id, enabled);

        // TODO: test validations
    }
}
