/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateProcessFilterRequest;
import io.swagger.client.model.CreateReprocessFilterRequest;
import io.swagger.client.model.FetchProcessorRequest;
import io.swagger.client.model.ProcessorFilter;
import io.swagger.client.model.ProcessorListRowResultPage;
import io.swagger.client.model.ReprocessDataInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessorFiltersApi
 */
@Ignore
public class ProcessorFiltersApiTest {

    private final ProcessorFiltersApi api = new ProcessorFiltersApi();

    /**
     * Creates a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProcessorFilterTest() throws ApiException {
        CreateProcessFilterRequest body = null;
        ProcessorFilter response = api.createProcessorFilter(body);

        // TODO: test validations
    }
    /**
     * Deletes a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProcessorFilterTest() throws ApiException {
        Integer id = null;
        Boolean response = api.deleteProcessorFilter(id);

        // TODO: test validations
    }
    /**
     * Fetch a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchProcessorFilterTest() throws ApiException {
        Integer id = null;
        ProcessorFilter response = api.fetchProcessorFilter(id);

        // TODO: test validations
    }
    /**
     * Finds processors and filters matching request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProcessorFiltersTest() throws ApiException {
        FetchProcessorRequest body = null;
        ProcessorListRowResultPage response = api.findProcessorFilters(body);

        // TODO: test validations
    }
    /**
     * Create filters to reprocess data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reprocessDataTest() throws ApiException {
        CreateReprocessFilterRequest body = null;
        List<ReprocessDataInfo> response = api.reprocessData(body);

        // TODO: test validations
    }
    /**
     * Sets the enabled/disabled state for a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProcessorFilterEnabledTest() throws ApiException {
        Integer id = null;
        Boolean body = null;
        Boolean response = api.setProcessorFilterEnabled(id, body);

        // TODO: test validations
    }
    /**
     * Sets the priority for a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProcessorFilterPriorityTest() throws ApiException {
        Integer id = null;
        Integer body = null;
        Boolean response = api.setProcessorFilterPriority(id, body);

        // TODO: test validations
    }
    /**
     * Updates a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProcessorFilterTest() throws ApiException {
        Integer id = null;
        ProcessorFilter body = null;
        ProcessorFilter response = api.updateProcessorFilter(id, body);

        // TODO: test validations
    }
}
