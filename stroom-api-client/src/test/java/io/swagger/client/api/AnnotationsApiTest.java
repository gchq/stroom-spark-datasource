/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AnnotationDetail;
import io.swagger.client.model.CreateEntryRequest;
import io.swagger.client.model.EventId;
import io.swagger.client.model.EventLink;
import io.swagger.client.model.SetAssignedToRequest;
import io.swagger.client.model.SetStatusRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationsApi
 */
@Ignore
public class AnnotationsApiTest {

    private final AnnotationsApi api = new AnnotationsApi();

    /**
     * Gets an annotation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnnotationEntryTest() throws ApiException {
        CreateEntryRequest body = null;
        AnnotationDetail response = api.createAnnotationEntry(body);

        // TODO: test validations
    }
    /**
     * Gets a list of predefined comments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationCommentsTest() throws ApiException {
        String filter = null;
        List<String> response = api.getAnnotationComments(filter);

        // TODO: test validations
    }
    /**
     * Gets a list of allowed statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationDStatusTest() throws ApiException {
        String filter = null;
        List<String> response = api.getAnnotationDStatus(filter);

        // TODO: test validations
    }
    /**
     * Gets an annotation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationDetailTest() throws ApiException {
        Long annotationId = null;
        AnnotationDetail response = api.getAnnotationDetail(annotationId);

        // TODO: test validations
    }
    /**
     * Gets a list of events linked to this annotation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationLinkedEventsTest() throws ApiException {
        Long annotationId = null;
        List<EventId> response = api.getAnnotationLinkedEvents(annotationId);

        // TODO: test validations
    }
    /**
     * Links an annotation to an event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linkAnnotationEventsTest() throws ApiException {
        EventLink body = null;
        List<EventId> response = api.linkAnnotationEvents(body);

        // TODO: test validations
    }
    /**
     * Bulk action to set the assignment for several annotations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnnotationAssignedToTest() throws ApiException {
        SetAssignedToRequest body = null;
        Integer response = api.setAnnotationAssignedTo(body);

        // TODO: test validations
    }
    /**
     * Bulk action to set the status for several annotations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnnotationStatusTest() throws ApiException {
        SetStatusRequest body = null;
        Integer response = api.setAnnotationStatus(body);

        // TODO: test validations
    }
    /**
     * Unlinks an annotation from an event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlinkAnnotationEventsTest() throws ApiException {
        EventLink body = null;
        List<EventId> response = api.unlinkAnnotationEvents(body);

        // TODO: test validations
    }
}
