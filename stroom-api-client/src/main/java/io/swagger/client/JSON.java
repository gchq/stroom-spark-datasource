/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(PermissionChangeEvent.class, new TypeSelector<PermissionChangeEvent>() {
            @Override
            public Class<? extends PermissionChangeEvent> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PermissionChangeEvent>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AddPermissionEvent".toUpperCase(), AddPermissionEvent.class);
                    classByDiscriminatorValue.put("ClearDocumentPermissionsEvent".toUpperCase(), ClearDocumentPermissionsEvent.class);
                    classByDiscriminatorValue.put("RemovePermissionEvent".toUpperCase(), RemovePermissionEvent.class);
                    classByDiscriminatorValue.put("PermissionChangeEvent".toUpperCase(), PermissionChangeEvent.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(PermissionChangeEvent.class, new PostProcessor<PermissionChangeEvent>() {
              @Override
              public void postDeserialize(PermissionChangeEvent result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PermissionChangeEvent src, Gson gson) {
                  Map<Class<? extends PermissionChangeEvent>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AddPermissionEvent.class, "AddPermissionEvent");
                      discriminatorValueByClass.put(ClearDocumentPermissionsEvent.class, "ClearDocumentPermissionsEvent");
                      discriminatorValueByClass.put(RemovePermissionEvent.class, "RemovePermissionEvent");
                      discriminatorValueByClass.put(PermissionChangeEvent.class, "PermissionChangeEvent");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AbstractField.class, new TypeSelector<AbstractField>() {
            @Override
            public Class<? extends AbstractField> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AbstractField>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BooleanField".toUpperCase(), BooleanField.class);
                    classByDiscriminatorValue.put("DateField".toUpperCase(), DateField.class);
                    classByDiscriminatorValue.put("DocRefField".toUpperCase(), DocRefField.class);
                    classByDiscriminatorValue.put("DoubleField".toUpperCase(), DoubleField.class);
                    classByDiscriminatorValue.put("FloatField".toUpperCase(), FloatField.class);
                    classByDiscriminatorValue.put("IdField".toUpperCase(), IdField.class);
                    classByDiscriminatorValue.put("IntegerField".toUpperCase(), IntegerField.class);
                    classByDiscriminatorValue.put("LongField".toUpperCase(), LongField.class);
                    classByDiscriminatorValue.put("TextField".toUpperCase(), TextField.class);
                    classByDiscriminatorValue.put("AbstractField".toUpperCase(), AbstractField.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(AbstractField.class, new PostProcessor<AbstractField>() {
              @Override
              public void postDeserialize(AbstractField result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AbstractField src, Gson gson) {
                  Map<Class<? extends AbstractField>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BooleanField.class, "BooleanField");
                      discriminatorValueByClass.put(DateField.class, "DateField");
                      discriminatorValueByClass.put(DocRefField.class, "DocRefField");
                      discriminatorValueByClass.put(DoubleField.class, "DoubleField");
                      discriminatorValueByClass.put(FloatField.class, "FloatField");
                      discriminatorValueByClass.put(IdField.class, "IdField");
                      discriminatorValueByClass.put(IntegerField.class, "IntegerField");
                      discriminatorValueByClass.put(LongField.class, "LongField");
                      discriminatorValueByClass.put(TextField.class, "TextField");
                      discriminatorValueByClass.put(AbstractField.class, "AbstractField");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(FormatSettings.class, new TypeSelector<FormatSettings>() {
            @Override
            public Class<? extends FormatSettings> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends FormatSettings>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DateTimeFormatSettings".toUpperCase(), DateTimeFormatSettings.class);
                    classByDiscriminatorValue.put("NumberFormatSettings".toUpperCase(), NumberFormatSettings.class);
                    classByDiscriminatorValue.put("FormatSettings".toUpperCase(), FormatSettings.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(FormatSettings.class, new PostProcessor<FormatSettings>() {
              @Override
              public void postDeserialize(FormatSettings result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, FormatSettings src, Gson gson) {
                  Map<Class<? extends FormatSettings>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DateTimeFormatSettings.class, "DateTimeFormatSettings");
                      discriminatorValueByClass.put(NumberFormatSettings.class, "NumberFormatSettings");
                      discriminatorValueByClass.put(FormatSettings.class, "FormatSettings");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Location.class, new TypeSelector<Location>() {
            @Override
            public Class<? extends Location> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Location>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DefaultLocation".toUpperCase(), DefaultLocation.class);
                    classByDiscriminatorValue.put("StreamLocation".toUpperCase(), StreamLocation.class);
                    classByDiscriminatorValue.put("Location".toUpperCase(), Location.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Location.class, new PostProcessor<Location>() {
              @Override
              public void postDeserialize(Location result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Location src, Gson gson) {
                  Map<Class<? extends Location>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DefaultLocation.class, "DefaultLocation");
                      discriminatorValueByClass.put(StreamLocation.class, "StreamLocation");
                      discriminatorValueByClass.put(Location.class, "Location");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CoprocessorSettings.class, new TypeSelector<CoprocessorSettings>() {
            @Override
            public Class<? extends CoprocessorSettings> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CoprocessorSettings>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("EventCoprocessorSettings".toUpperCase(), EventCoprocessorSettings.class);
                    classByDiscriminatorValue.put("TableCoprocessorSettings".toUpperCase(), TableCoprocessorSettings.class);
                    classByDiscriminatorValue.put("CoprocessorSettings".toUpperCase(), CoprocessorSettings.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(CoprocessorSettings.class, new PostProcessor<CoprocessorSettings>() {
              @Override
              public void postDeserialize(CoprocessorSettings result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CoprocessorSettings src, Gson gson) {
                  Map<Class<? extends CoprocessorSettings>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(EventCoprocessorSettings.class, "EventCoprocessorSettings");
                      discriminatorValueByClass.put(TableCoprocessorSettings.class, "TableCoprocessorSettings");
                      discriminatorValueByClass.put(CoprocessorSettings.class, "CoprocessorSettings");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ExpressionItem.class, new TypeSelector<ExpressionItem>() {
            @Override
            public Class<? extends ExpressionItem> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ExpressionItem>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ExpressionTerm".toUpperCase(), ExpressionTerm.class);
                    classByDiscriminatorValue.put("ExpressionItem".toUpperCase(), ExpressionItem.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(ExpressionItem.class, new PostProcessor<ExpressionItem>() {
              @Override
              public void postDeserialize(ExpressionItem result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ExpressionItem src, Gson gson) {
                  Map<Class<? extends ExpressionItem>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ExpressionTerm.class, "ExpressionTerm");
                      discriminatorValueByClass.put(ExpressionItem.class, "ExpressionItem");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AbstractFetchDataResult.class, new TypeSelector<AbstractFetchDataResult>() {
            @Override
            public Class<? extends AbstractFetchDataResult> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AbstractFetchDataResult>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FetchDataResult".toUpperCase(), FetchDataResult.class);
                    classByDiscriminatorValue.put("FetchMarkerResult".toUpperCase(), FetchMarkerResult.class);
                    classByDiscriminatorValue.put("AbstractFetchDataResult".toUpperCase(), AbstractFetchDataResult.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(AbstractFetchDataResult.class, new PostProcessor<AbstractFetchDataResult>() {
              @Override
              public void postDeserialize(AbstractFetchDataResult result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AbstractFetchDataResult src, Gson gson) {
                  Map<Class<? extends AbstractFetchDataResult>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FetchDataResult.class, "FetchDataResult");
                      discriminatorValueByClass.put(FetchMarkerResult.class, "FetchMarkerResult");
                      discriminatorValueByClass.put(AbstractFetchDataResult.class, "AbstractFetchDataResult");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Result.class, new TypeSelector<Result>() {
            @Override
            public Class<? extends Result> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Result>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FlatResult".toUpperCase(), FlatResult.class);
                    classByDiscriminatorValue.put("TableResult".toUpperCase(), TableResult.class);
                    classByDiscriminatorValue.put("VisResult".toUpperCase(), VisResult.class);
                    classByDiscriminatorValue.put("Result".toUpperCase(), Result.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Result.class, new PostProcessor<Result>() {
              @Override
              public void postDeserialize(Result result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Result src, Gson gson) {
                  Map<Class<? extends Result>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FlatResult.class, "FlatResult");
                      discriminatorValueByClass.put(TableResult.class, "TableResult");
                      discriminatorValueByClass.put(VisResult.class, "VisResult");
                      discriminatorValueByClass.put(Result.class, "Result");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ProcessorListRow.class, new TypeSelector<ProcessorListRow>() {
            @Override
            public Class<? extends ProcessorListRow> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ProcessorListRow>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ProcessorFilterRow".toUpperCase(), ProcessorFilterRow.class);
                    classByDiscriminatorValue.put("ProcessorRow".toUpperCase(), ProcessorRow.class);
                    classByDiscriminatorValue.put("ProcessorListRow".toUpperCase(), ProcessorListRow.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(ProcessorListRow.class, new PostProcessor<ProcessorListRow>() {
              @Override
              public void postDeserialize(ProcessorListRow result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ProcessorListRow src, Gson gson) {
                  Map<Class<? extends ProcessorListRow>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ProcessorFilterRow.class, "ProcessorFilterRow");
                      discriminatorValueByClass.put(ProcessorRow.class, "ProcessorRow");
                      discriminatorValueByClass.put(ProcessorListRow.class, "ProcessorListRow");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ComponentSettings.class, new TypeSelector<ComponentSettings>() {
            @Override
            public Class<? extends ComponentSettings> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ComponentSettings>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("QueryComponentSettings".toUpperCase(), QueryComponentSettings.class);
                    classByDiscriminatorValue.put("TextComponentSettings".toUpperCase(), TextComponentSettings.class);
                    classByDiscriminatorValue.put("VisComponentSettings".toUpperCase(), VisComponentSettings.class);
                    classByDiscriminatorValue.put("ComponentSettings".toUpperCase(), ComponentSettings.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(ComponentSettings.class, new PostProcessor<ComponentSettings>() {
              @Override
              public void postDeserialize(ComponentSettings result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ComponentSettings src, Gson gson) {
                  Map<Class<? extends ComponentSettings>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(QueryComponentSettings.class, "QueryComponentSettings");
                      discriminatorValueByClass.put(TextComponentSettings.class, "TextComponentSettings");
                      discriminatorValueByClass.put(VisComponentSettings.class, "VisComponentSettings");
                      discriminatorValueByClass.put(ComponentSettings.class, "ComponentSettings");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LayoutConfig.class, new TypeSelector<LayoutConfig>() {
            @Override
            public Class<? extends LayoutConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LayoutConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SplitLayoutConfig".toUpperCase(), SplitLayoutConfig.class);
                    classByDiscriminatorValue.put("TabLayoutConfig".toUpperCase(), TabLayoutConfig.class);
                    classByDiscriminatorValue.put("LayoutConfig".toUpperCase(), LayoutConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LayoutConfig.class, new PostProcessor<LayoutConfig>() {
              @Override
              public void postDeserialize(LayoutConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LayoutConfig src, Gson gson) {
                  Map<Class<? extends LayoutConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SplitLayoutConfig.class, "SplitLayoutConfig");
                      discriminatorValueByClass.put(TabLayoutConfig.class, "TabLayoutConfig");
                      discriminatorValueByClass.put(LayoutConfig.class, "LayoutConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Marker.class, new TypeSelector<Marker>() {
            @Override
            public Class<? extends Marker> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Marker>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Summary".toUpperCase(), Summary.class);
                    classByDiscriminatorValue.put("Marker".toUpperCase(), Marker.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Marker.class, new PostProcessor<Marker>() {
              @Override
              public void postDeserialize(Marker result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Marker src, Gson gson) {
                  Map<Class<? extends Marker>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Summary.class, "Summary");
                      discriminatorValueByClass.put(Marker.class, "Marker");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ComponentResultRequest.class, new TypeSelector<ComponentResultRequest>() {
            @Override
            public Class<? extends ComponentResultRequest> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ComponentResultRequest>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TableResultRequest".toUpperCase(), TableResultRequest.class);
                    classByDiscriminatorValue.put("VisResultRequest".toUpperCase(), VisResultRequest.class);
                    classByDiscriminatorValue.put("ComponentResultRequest".toUpperCase(), ComponentResultRequest.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(ComponentResultRequest.class, new PostProcessor<ComponentResultRequest>() {
              @Override
              public void postDeserialize(ComponentResultRequest result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ComponentResultRequest src, Gson gson) {
                  Map<Class<? extends ComponentResultRequest>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TableResultRequest.class, "TableResultRequest");
                      discriminatorValueByClass.put(VisResultRequest.class, "VisResultRequest");
                      discriminatorValueByClass.put(ComponentResultRequest.class, "ComponentResultRequest");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
