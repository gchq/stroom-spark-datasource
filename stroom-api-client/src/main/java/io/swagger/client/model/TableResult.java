/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Field;
import io.swagger.client.model.OffsetRange;
import io.swagger.client.model.Result;
import io.swagger.client.model.Row;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Object for describing a set of results in a table form that supports grouped data
 */
@Schema(description = "Object for describing a set of results in a table form that supports grouped data")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class TableResult extends Result {
  @SerializedName("fields")
  private List<Field> fields = new ArrayList<Field>();

  @SerializedName("resultRange")
  private OffsetRange resultRange = null;

  @SerializedName("rows")
  private List<Row> rows = new ArrayList<Row>();

  @SerializedName("totalResults")
  private Integer totalResults = null;

  public TableResult fields(List<Field> fields) {
    this.fields = fields;
    return this;
  }

  public TableResult addFieldsItem(Field fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Schema(required = true, description = "")
  public List<Field> getFields() {
    return fields;
  }

  public void setFields(List<Field> fields) {
    this.fields = fields;
  }

  public TableResult resultRange(OffsetRange resultRange) {
    this.resultRange = resultRange;
    return this;
  }

   /**
   * Get resultRange
   * @return resultRange
  **/
  @Schema(required = true, description = "")
  public OffsetRange getResultRange() {
    return resultRange;
  }

  public void setResultRange(OffsetRange resultRange) {
    this.resultRange = resultRange;
  }

  public TableResult rows(List<Row> rows) {
    this.rows = rows;
    return this;
  }

  public TableResult addRowsItem(Row rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @Schema(required = true, description = "")
  public List<Row> getRows() {
    return rows;
  }

  public void setRows(List<Row> rows) {
    this.rows = rows;
  }

  public TableResult totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

   /**
   * Get totalResults
   * @return totalResults
  **/
  @Schema(description = "")
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableResult tableResult = (TableResult) o;
    return Objects.equals(this.fields, tableResult.fields) &&
        Objects.equals(this.resultRange, tableResult.resultRange) &&
        Objects.equals(this.rows, tableResult.rows) &&
        Objects.equals(this.totalResults, tableResult.totalResults) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, resultRange, rows, totalResults, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableResult {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    resultRange: ").append(toIndentedString(resultRange)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
