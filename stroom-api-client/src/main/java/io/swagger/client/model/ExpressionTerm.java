/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.ExpressionItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * A predicate term in a query expression tree
 */
@Schema(description = "A predicate term in a query expression tree")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ExpressionTerm extends ExpressionItem {
  /**
   * The condition of the predicate term
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    CONTAINS("CONTAINS"),
    EQUALS("EQUALS"),
    GREATER_THAN("GREATER_THAN"),
    GREATER_THAN_OR_EQUAL_TO("GREATER_THAN_OR_EQUAL_TO"),
    LESS_THAN("LESS_THAN"),
    LESS_THAN_OR_EQUAL_TO("LESS_THAN_OR_EQUAL_TO"),
    BETWEEN("BETWEEN"),
    IN("IN"),
    IN_DICTIONARY("IN_DICTIONARY"),
    IN_FOLDER("IN_FOLDER"),
    IS_DOC_REF("IS_DOC_REF"),
    IS_NULL("IS_NULL"),
    IS_NOT_NULL("IS_NOT_NULL");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ConditionEnum fromValue(String text) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ConditionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("condition")
  private ConditionEnum condition = null;

  @SerializedName("docRef")
  private DocRef docRef = null;

  @SerializedName("field")
  private String field = null;

  @SerializedName("value")
  private String value = null;

  public ExpressionTerm condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition of the predicate term
   * @return condition
  **/
  @Schema(required = true, description = "The condition of the predicate term")
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }

  public ExpressionTerm docRef(DocRef docRef) {
    this.docRef = docRef;
    return this;
  }

   /**
   * Get docRef
   * @return docRef
  **/
  @Schema(description = "")
  public DocRef getDocRef() {
    return docRef;
  }

  public void setDocRef(DocRef docRef) {
    this.docRef = docRef;
  }

  public ExpressionTerm field(String field) {
    this.field = field;
    return this;
  }

   /**
   * The name of the field that is being evaluated in this predicate term
   * @return field
  **/
  @Schema(required = true, description = "The name of the field that is being evaluated in this predicate term")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }

  public ExpressionTerm value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value that the field value is being evaluated against. Not required if a dictionary is supplied
   * @return value
  **/
  @Schema(description = "The value that the field value is being evaluated against. Not required if a dictionary is supplied")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionTerm expressionTerm = (ExpressionTerm) o;
    return Objects.equals(this.condition, expressionTerm.condition) &&
        Objects.equals(this.docRef, expressionTerm.docRef) &&
        Objects.equals(this.field, expressionTerm.field) &&
        Objects.equals(this.value, expressionTerm.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, docRef, field, value, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionTerm {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    docRef: ").append(toIndentedString(docRef)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
