/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Field;
import io.swagger.client.model.Result;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A result structure used primarily for visualisation data
 */
@Schema(description = "A result structure used primarily for visualisation data")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FlatResult extends Result {
  @SerializedName("size")
  private Long size = null;

  @SerializedName("structure")
  private List<Field> structure = null;

  @SerializedName("values")
  private List<List<Object>> values = null;

  public FlatResult size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public FlatResult structure(List<Field> structure) {
    this.structure = structure;
    return this;
  }

  public FlatResult addStructureItem(Field structureItem) {
    if (this.structure == null) {
      this.structure = new ArrayList<Field>();
    }
    this.structure.add(structureItem);
    return this;
  }

   /**
   * Get structure
   * @return structure
  **/
  @Schema(description = "")
  public List<Field> getStructure() {
    return structure;
  }

  public void setStructure(List<Field> structure) {
    this.structure = structure;
  }

  public FlatResult values(List<List<Object>> values) {
    this.values = values;
    return this;
  }

  public FlatResult addValuesItem(List<Object> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<List<Object>>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @Schema(description = "")
  public List<List<Object>> getValues() {
    return values;
  }

  public void setValues(List<List<Object>> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlatResult flatResult = (FlatResult) o;
    return Objects.equals(this.size, flatResult.size) &&
        Objects.equals(this.structure, flatResult.structure) &&
        Objects.equals(this.values, flatResult.values) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, structure, values, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlatResult {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
