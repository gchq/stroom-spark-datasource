/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.SourceLocation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FetchDataRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FetchDataRequest {
  /**
   * Gets or Sets expandedSeverities
   */
  @JsonAdapter(ExpandedSeveritiesEnum.Adapter.class)
  public enum ExpandedSeveritiesEnum {
    INFO("INFO"),
    WARN("WARN"),
    ERROR("ERROR"),
    FATAL("FATAL");

    private String value;

    ExpandedSeveritiesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExpandedSeveritiesEnum fromValue(String text) {
      for (ExpandedSeveritiesEnum b : ExpandedSeveritiesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExpandedSeveritiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpandedSeveritiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpandedSeveritiesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExpandedSeveritiesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("expandedSeverities")
  private List<ExpandedSeveritiesEnum> expandedSeverities = null;

  @SerializedName("markerMode")
  private Boolean markerMode = null;

  @SerializedName("pipeline")
  private DocRef pipeline = null;

  @SerializedName("segmentCount")
  private Long segmentCount = null;

  @SerializedName("showAsHtml")
  private Boolean showAsHtml = null;

  @SerializedName("sourceLocation")
  private SourceLocation sourceLocation = null;

  public FetchDataRequest expandedSeverities(List<ExpandedSeveritiesEnum> expandedSeverities) {
    this.expandedSeverities = expandedSeverities;
    return this;
  }

  public FetchDataRequest addExpandedSeveritiesItem(ExpandedSeveritiesEnum expandedSeveritiesItem) {
    if (this.expandedSeverities == null) {
      this.expandedSeverities = new ArrayList<ExpandedSeveritiesEnum>();
    }
    this.expandedSeverities.add(expandedSeveritiesItem);
    return this;
  }

   /**
   * Get expandedSeverities
   * @return expandedSeverities
  **/
  @Schema(description = "")
  public List<ExpandedSeveritiesEnum> getExpandedSeverities() {
    return expandedSeverities;
  }

  public void setExpandedSeverities(List<ExpandedSeveritiesEnum> expandedSeverities) {
    this.expandedSeverities = expandedSeverities;
  }

  public FetchDataRequest markerMode(Boolean markerMode) {
    this.markerMode = markerMode;
    return this;
  }

   /**
   * Get markerMode
   * @return markerMode
  **/
  @Schema(description = "")
  public Boolean isMarkerMode() {
    return markerMode;
  }

  public void setMarkerMode(Boolean markerMode) {
    this.markerMode = markerMode;
  }

  public FetchDataRequest pipeline(DocRef pipeline) {
    this.pipeline = pipeline;
    return this;
  }

   /**
   * Get pipeline
   * @return pipeline
  **/
  @Schema(description = "")
  public DocRef getPipeline() {
    return pipeline;
  }

  public void setPipeline(DocRef pipeline) {
    this.pipeline = pipeline;
  }

  public FetchDataRequest segmentCount(Long segmentCount) {
    this.segmentCount = segmentCount;
    return this;
  }

   /**
   * Get segmentCount
   * @return segmentCount
  **/
  @Schema(description = "")
  public Long getSegmentCount() {
    return segmentCount;
  }

  public void setSegmentCount(Long segmentCount) {
    this.segmentCount = segmentCount;
  }

  public FetchDataRequest showAsHtml(Boolean showAsHtml) {
    this.showAsHtml = showAsHtml;
    return this;
  }

   /**
   * Get showAsHtml
   * @return showAsHtml
  **/
  @Schema(description = "")
  public Boolean isShowAsHtml() {
    return showAsHtml;
  }

  public void setShowAsHtml(Boolean showAsHtml) {
    this.showAsHtml = showAsHtml;
  }

  public FetchDataRequest sourceLocation(SourceLocation sourceLocation) {
    this.sourceLocation = sourceLocation;
    return this;
  }

   /**
   * Get sourceLocation
   * @return sourceLocation
  **/
  @Schema(description = "")
  public SourceLocation getSourceLocation() {
    return sourceLocation;
  }

  public void setSourceLocation(SourceLocation sourceLocation) {
    this.sourceLocation = sourceLocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchDataRequest fetchDataRequest = (FetchDataRequest) o;
    return Objects.equals(this.expandedSeverities, fetchDataRequest.expandedSeverities) &&
        Objects.equals(this.markerMode, fetchDataRequest.markerMode) &&
        Objects.equals(this.pipeline, fetchDataRequest.pipeline) &&
        Objects.equals(this.segmentCount, fetchDataRequest.segmentCount) &&
        Objects.equals(this.showAsHtml, fetchDataRequest.showAsHtml) &&
        Objects.equals(this.sourceLocation, fetchDataRequest.sourceLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expandedSeverities, markerMode, pipeline, segmentCount, showAsHtml, sourceLocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchDataRequest {\n");
    
    sb.append("    expandedSeverities: ").append(toIndentedString(expandedSeverities)).append("\n");
    sb.append("    markerMode: ").append(toIndentedString(markerMode)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    segmentCount: ").append(toIndentedString(segmentCount)).append("\n");
    sb.append("    showAsHtml: ").append(toIndentedString(showAsHtml)).append("\n");
    sb.append("    sourceLocation: ").append(toIndentedString(sourceLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
