/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ComponentSettings;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.TableComponentSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * VisComponentSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class VisComponentSettings extends ComponentSettings {
  @SerializedName("json")
  private String json = null;

  @SerializedName("tableId")
  private String tableId = null;

  @SerializedName("tableSettings")
  private TableComponentSettings tableSettings = null;

  @SerializedName("visualisation")
  private DocRef visualisation = null;

  public VisComponentSettings json(String json) {
    this.json = json;
    return this;
  }

   /**
   * Get json
   * @return json
  **/
  @Schema(description = "")
  public String getJson() {
    return json;
  }

  public void setJson(String json) {
    this.json = json;
  }

  public VisComponentSettings tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

   /**
   * Get tableId
   * @return tableId
  **/
  @Schema(description = "")
  public String getTableId() {
    return tableId;
  }

  public void setTableId(String tableId) {
    this.tableId = tableId;
  }

  public VisComponentSettings tableSettings(TableComponentSettings tableSettings) {
    this.tableSettings = tableSettings;
    return this;
  }

   /**
   * Get tableSettings
   * @return tableSettings
  **/
  @Schema(description = "")
  public TableComponentSettings getTableSettings() {
    return tableSettings;
  }

  public void setTableSettings(TableComponentSettings tableSettings) {
    this.tableSettings = tableSettings;
  }

  public VisComponentSettings visualisation(DocRef visualisation) {
    this.visualisation = visualisation;
    return this;
  }

   /**
   * Get visualisation
   * @return visualisation
  **/
  @Schema(description = "")
  public DocRef getVisualisation() {
    return visualisation;
  }

  public void setVisualisation(DocRef visualisation) {
    this.visualisation = visualisation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisComponentSettings visComponentSettings = (VisComponentSettings) o;
    return Objects.equals(this.json, visComponentSettings.json) &&
        Objects.equals(this.tableId, visComponentSettings.tableId) &&
        Objects.equals(this.tableSettings, visComponentSettings.tableSettings) &&
        Objects.equals(this.visualisation, visComponentSettings.visualisation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(json, tableId, tableSettings, visualisation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisComponentSettings {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableSettings: ").append(toIndentedString(tableSettings)).append("\n");
    sb.append("    visualisation: ").append(toIndentedString(visualisation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
