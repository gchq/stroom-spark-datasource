/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DBTableStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class DBTableStatus {
  @SerializedName("count")
  private Long count = null;

  @SerializedName("dataSize")
  private Long dataSize = null;

  @SerializedName("db")
  private String db = null;

  @SerializedName("indexSize")
  private Long indexSize = null;

  @SerializedName("table")
  private String table = null;

  public DBTableStatus count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }

  public DBTableStatus dataSize(Long dataSize) {
    this.dataSize = dataSize;
    return this;
  }

   /**
   * Get dataSize
   * @return dataSize
  **/
  @Schema(description = "")
  public Long getDataSize() {
    return dataSize;
  }

  public void setDataSize(Long dataSize) {
    this.dataSize = dataSize;
  }

  public DBTableStatus db(String db) {
    this.db = db;
    return this;
  }

   /**
   * Get db
   * @return db
  **/
  @Schema(description = "")
  public String getDb() {
    return db;
  }

  public void setDb(String db) {
    this.db = db;
  }

  public DBTableStatus indexSize(Long indexSize) {
    this.indexSize = indexSize;
    return this;
  }

   /**
   * Get indexSize
   * @return indexSize
  **/
  @Schema(description = "")
  public Long getIndexSize() {
    return indexSize;
  }

  public void setIndexSize(Long indexSize) {
    this.indexSize = indexSize;
  }

  public DBTableStatus table(String table) {
    this.table = table;
    return this;
  }

   /**
   * Get table
   * @return table
  **/
  @Schema(description = "")
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBTableStatus dbTableStatus = (DBTableStatus) o;
    return Objects.equals(this.count, dbTableStatus.count) &&
        Objects.equals(this.dataSize, dbTableStatus.dataSize) &&
        Objects.equals(this.db, dbTableStatus.db) &&
        Objects.equals(this.indexSize, dbTableStatus.indexSize) &&
        Objects.equals(this.table, dbTableStatus.table);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, dataSize, db, indexSize, table);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBTableStatus {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    db: ").append(toIndentedString(db)).append("\n");
    sb.append("    indexSize: ").append(toIndentedString(indexSize)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
