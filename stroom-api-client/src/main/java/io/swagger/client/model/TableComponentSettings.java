/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.Field;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * TableComponentSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class TableComponentSettings {
  @SerializedName("extractValues")
  private Boolean extractValues = null;

  @SerializedName("extractionPipeline")
  private DocRef extractionPipeline = null;

  @SerializedName("fields")
  private List<Field> fields = new ArrayList<Field>();

  @SerializedName("maxResults")
  private List<Integer> maxResults = null;

  @SerializedName("queryId")
  private String queryId = null;

  @SerializedName("showDetail")
  private Boolean showDetail = null;

  public TableComponentSettings extractValues(Boolean extractValues) {
    this.extractValues = extractValues;
    return this;
  }

   /**
   * TODO
   * @return extractValues
  **/
  @Schema(description = "TODO")
  public Boolean isExtractValues() {
    return extractValues;
  }

  public void setExtractValues(Boolean extractValues) {
    this.extractValues = extractValues;
  }

  public TableComponentSettings extractionPipeline(DocRef extractionPipeline) {
    this.extractionPipeline = extractionPipeline;
    return this;
  }

   /**
   * Get extractionPipeline
   * @return extractionPipeline
  **/
  @Schema(description = "")
  public DocRef getExtractionPipeline() {
    return extractionPipeline;
  }

  public void setExtractionPipeline(DocRef extractionPipeline) {
    this.extractionPipeline = extractionPipeline;
  }

  public TableComponentSettings fields(List<Field> fields) {
    this.fields = fields;
    return this;
  }

  public TableComponentSettings addFieldsItem(Field fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Schema(required = true, description = "")
  public List<Field> getFields() {
    return fields;
  }

  public void setFields(List<Field> fields) {
    this.fields = fields;
  }

  public TableComponentSettings maxResults(List<Integer> maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  public TableComponentSettings addMaxResultsItem(Integer maxResultsItem) {
    if (this.maxResults == null) {
      this.maxResults = new ArrayList<Integer>();
    }
    this.maxResults.add(maxResultsItem);
    return this;
  }

   /**
   * Defines the maximum number of results to return at each grouping level, e.g. &#x27;1000,10,1&#x27; means 1000 results at group level 0, 10 at level 1 and 1 at level 2. In the absence of this field system defaults will apply
   * @return maxResults
  **/
  @Schema(example = "1000,10,1", description = "Defines the maximum number of results to return at each grouping level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level 1 and 1 at level 2. In the absence of this field system defaults will apply")
  public List<Integer> getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(List<Integer> maxResults) {
    this.maxResults = maxResults;
  }

  public TableComponentSettings queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

   /**
   * TODO
   * @return queryId
  **/
  @Schema(required = true, description = "TODO")
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }

  public TableComponentSettings showDetail(Boolean showDetail) {
    this.showDetail = showDetail;
    return this;
  }

   /**
   * Get showDetail
   * @return showDetail
  **/
  @Schema(description = "")
  public Boolean isShowDetail() {
    return showDetail;
  }

  public void setShowDetail(Boolean showDetail) {
    this.showDetail = showDetail;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableComponentSettings tableComponentSettings = (TableComponentSettings) o;
    return Objects.equals(this.extractValues, tableComponentSettings.extractValues) &&
        Objects.equals(this.extractionPipeline, tableComponentSettings.extractionPipeline) &&
        Objects.equals(this.fields, tableComponentSettings.fields) &&
        Objects.equals(this.maxResults, tableComponentSettings.maxResults) &&
        Objects.equals(this.queryId, tableComponentSettings.queryId) &&
        Objects.equals(this.showDetail, tableComponentSettings.showDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extractValues, extractionPipeline, fields, maxResults, queryId, showDetail);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableComponentSettings {\n");
    
    sb.append("    extractValues: ").append(toIndentedString(extractValues)).append("\n");
    sb.append("    extractionPipeline: ").append(toIndentedString(extractionPipeline)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    showDetail: ").append(toIndentedString(showDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
