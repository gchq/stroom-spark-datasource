/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CoprocessorSettings;
import io.swagger.client.model.EventRef;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EventCoprocessorSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class EventCoprocessorSettings extends CoprocessorSettings {
  @SerializedName("maxEvent")
  private EventRef maxEvent = null;

  @SerializedName("maxEvents")
  private Long maxEvents = null;

  @SerializedName("maxEventsPerStream")
  private Long maxEventsPerStream = null;

  @SerializedName("maxStreams")
  private Long maxStreams = null;

  @SerializedName("minEvent")
  private EventRef minEvent = null;

  public EventCoprocessorSettings maxEvent(EventRef maxEvent) {
    this.maxEvent = maxEvent;
    return this;
  }

   /**
   * Get maxEvent
   * @return maxEvent
  **/
  @Schema(description = "")
  public EventRef getMaxEvent() {
    return maxEvent;
  }

  public void setMaxEvent(EventRef maxEvent) {
    this.maxEvent = maxEvent;
  }

  public EventCoprocessorSettings maxEvents(Long maxEvents) {
    this.maxEvents = maxEvents;
    return this;
  }

   /**
   * Get maxEvents
   * @return maxEvents
  **/
  @Schema(description = "")
  public Long getMaxEvents() {
    return maxEvents;
  }

  public void setMaxEvents(Long maxEvents) {
    this.maxEvents = maxEvents;
  }

  public EventCoprocessorSettings maxEventsPerStream(Long maxEventsPerStream) {
    this.maxEventsPerStream = maxEventsPerStream;
    return this;
  }

   /**
   * Get maxEventsPerStream
   * @return maxEventsPerStream
  **/
  @Schema(description = "")
  public Long getMaxEventsPerStream() {
    return maxEventsPerStream;
  }

  public void setMaxEventsPerStream(Long maxEventsPerStream) {
    this.maxEventsPerStream = maxEventsPerStream;
  }

  public EventCoprocessorSettings maxStreams(Long maxStreams) {
    this.maxStreams = maxStreams;
    return this;
  }

   /**
   * Get maxStreams
   * @return maxStreams
  **/
  @Schema(description = "")
  public Long getMaxStreams() {
    return maxStreams;
  }

  public void setMaxStreams(Long maxStreams) {
    this.maxStreams = maxStreams;
  }

  public EventCoprocessorSettings minEvent(EventRef minEvent) {
    this.minEvent = minEvent;
    return this;
  }

   /**
   * Get minEvent
   * @return minEvent
  **/
  @Schema(description = "")
  public EventRef getMinEvent() {
    return minEvent;
  }

  public void setMinEvent(EventRef minEvent) {
    this.minEvent = minEvent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventCoprocessorSettings eventCoprocessorSettings = (EventCoprocessorSettings) o;
    return Objects.equals(this.maxEvent, eventCoprocessorSettings.maxEvent) &&
        Objects.equals(this.maxEvents, eventCoprocessorSettings.maxEvents) &&
        Objects.equals(this.maxEventsPerStream, eventCoprocessorSettings.maxEventsPerStream) &&
        Objects.equals(this.maxStreams, eventCoprocessorSettings.maxStreams) &&
        Objects.equals(this.minEvent, eventCoprocessorSettings.minEvent) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxEvent, maxEvents, maxEventsPerStream, maxStreams, minEvent, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventCoprocessorSettings {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    maxEvent: ").append(toIndentedString(maxEvent)).append("\n");
    sb.append("    maxEvents: ").append(toIndentedString(maxEvents)).append("\n");
    sb.append("    maxEventsPerStream: ").append(toIndentedString(maxEventsPerStream)).append("\n");
    sb.append("    maxStreams: ").append(toIndentedString(maxStreams)).append("\n");
    sb.append("    minEvent: ").append(toIndentedString(minEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
