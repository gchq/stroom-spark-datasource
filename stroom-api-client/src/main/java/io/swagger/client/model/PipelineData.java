/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PipelineElements;
import io.swagger.client.model.PipelineLinks;
import io.swagger.client.model.PipelineProperties;
import io.swagger.client.model.PipelineReferences;
import io.swagger.client.model.Processor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PipelineData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class PipelineData {
  @SerializedName("elements")
  private PipelineElements elements = null;

  @SerializedName("links")
  private PipelineLinks links = null;

  @SerializedName("pipelineReferences")
  private PipelineReferences pipelineReferences = null;

  @SerializedName("processors")
  private List<Processor> processors = null;

  @SerializedName("properties")
  private PipelineProperties properties = null;

  public PipelineData elements(PipelineElements elements) {
    this.elements = elements;
    return this;
  }

   /**
   * Get elements
   * @return elements
  **/
  @Schema(description = "")
  public PipelineElements getElements() {
    return elements;
  }

  public void setElements(PipelineElements elements) {
    this.elements = elements;
  }

  public PipelineData links(PipelineLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public PipelineLinks getLinks() {
    return links;
  }

  public void setLinks(PipelineLinks links) {
    this.links = links;
  }

  public PipelineData pipelineReferences(PipelineReferences pipelineReferences) {
    this.pipelineReferences = pipelineReferences;
    return this;
  }

   /**
   * Get pipelineReferences
   * @return pipelineReferences
  **/
  @Schema(description = "")
  public PipelineReferences getPipelineReferences() {
    return pipelineReferences;
  }

  public void setPipelineReferences(PipelineReferences pipelineReferences) {
    this.pipelineReferences = pipelineReferences;
  }

  public PipelineData processors(List<Processor> processors) {
    this.processors = processors;
    return this;
  }

  public PipelineData addProcessorsItem(Processor processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<Processor>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * Get processors
   * @return processors
  **/
  @Schema(description = "")
  public List<Processor> getProcessors() {
    return processors;
  }

  public void setProcessors(List<Processor> processors) {
    this.processors = processors;
  }

  public PipelineData properties(PipelineProperties properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public PipelineProperties getProperties() {
    return properties;
  }

  public void setProperties(PipelineProperties properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineData pipelineData = (PipelineData) o;
    return Objects.equals(this.elements, pipelineData.elements) &&
        Objects.equals(this.links, pipelineData.links) &&
        Objects.equals(this.pipelineReferences, pipelineData.pipelineReferences) &&
        Objects.equals(this.processors, pipelineData.processors) &&
        Objects.equals(this.properties, pipelineData.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elements, links, pipelineReferences, processors, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineData {\n");
    
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    pipelineReferences: ").append(toIndentedString(pipelineReferences)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
