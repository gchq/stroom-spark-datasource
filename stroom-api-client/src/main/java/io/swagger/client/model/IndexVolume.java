/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * IndexVolume
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class IndexVolume {
  @SerializedName("bytesFree")
  private Long bytesFree = null;

  @SerializedName("bytesLimit")
  private Long bytesLimit = null;

  @SerializedName("bytesTotal")
  private Long bytesTotal = null;

  @SerializedName("bytesUsed")
  private Long bytesUsed = null;

  @SerializedName("createTimeMs")
  private Long createTimeMs = null;

  @SerializedName("createUser")
  private String createUser = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("indexVolumeGroupId")
  private Integer indexVolumeGroupId = null;

  @SerializedName("nodeName")
  private String nodeName = null;

  @SerializedName("path")
  private String path = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    INACTIVE("INACTIVE"),
    CLOSED("CLOSED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("statusMs")
  private Long statusMs = null;

  @SerializedName("updateTimeMs")
  private Long updateTimeMs = null;

  @SerializedName("updateUser")
  private String updateUser = null;

  @SerializedName("version")
  private Integer version = null;

  public IndexVolume bytesFree(Long bytesFree) {
    this.bytesFree = bytesFree;
    return this;
  }

   /**
   * Get bytesFree
   * @return bytesFree
  **/
  @Schema(description = "")
  public Long getBytesFree() {
    return bytesFree;
  }

  public void setBytesFree(Long bytesFree) {
    this.bytesFree = bytesFree;
  }

  public IndexVolume bytesLimit(Long bytesLimit) {
    this.bytesLimit = bytesLimit;
    return this;
  }

   /**
   * Get bytesLimit
   * @return bytesLimit
  **/
  @Schema(description = "")
  public Long getBytesLimit() {
    return bytesLimit;
  }

  public void setBytesLimit(Long bytesLimit) {
    this.bytesLimit = bytesLimit;
  }

  public IndexVolume bytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
    return this;
  }

   /**
   * Get bytesTotal
   * @return bytesTotal
  **/
  @Schema(description = "")
  public Long getBytesTotal() {
    return bytesTotal;
  }

  public void setBytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
  }

  public IndexVolume bytesUsed(Long bytesUsed) {
    this.bytesUsed = bytesUsed;
    return this;
  }

   /**
   * Get bytesUsed
   * @return bytesUsed
  **/
  @Schema(description = "")
  public Long getBytesUsed() {
    return bytesUsed;
  }

  public void setBytesUsed(Long bytesUsed) {
    this.bytesUsed = bytesUsed;
  }

  public IndexVolume createTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
    return this;
  }

   /**
   * Get createTimeMs
   * @return createTimeMs
  **/
  @Schema(description = "")
  public Long getCreateTimeMs() {
    return createTimeMs;
  }

  public void setCreateTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
  }

  public IndexVolume createUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

   /**
   * Get createUser
   * @return createUser
  **/
  @Schema(description = "")
  public String getCreateUser() {
    return createUser;
  }

  public void setCreateUser(String createUser) {
    this.createUser = createUser;
  }

  public IndexVolume id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public IndexVolume indexVolumeGroupId(Integer indexVolumeGroupId) {
    this.indexVolumeGroupId = indexVolumeGroupId;
    return this;
  }

   /**
   * Get indexVolumeGroupId
   * @return indexVolumeGroupId
  **/
  @Schema(description = "")
  public Integer getIndexVolumeGroupId() {
    return indexVolumeGroupId;
  }

  public void setIndexVolumeGroupId(Integer indexVolumeGroupId) {
    this.indexVolumeGroupId = indexVolumeGroupId;
  }

  public IndexVolume nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public IndexVolume path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public IndexVolume state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public IndexVolume statusMs(Long statusMs) {
    this.statusMs = statusMs;
    return this;
  }

   /**
   * Get statusMs
   * @return statusMs
  **/
  @Schema(description = "")
  public Long getStatusMs() {
    return statusMs;
  }

  public void setStatusMs(Long statusMs) {
    this.statusMs = statusMs;
  }

  public IndexVolume updateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
    return this;
  }

   /**
   * Get updateTimeMs
   * @return updateTimeMs
  **/
  @Schema(description = "")
  public Long getUpdateTimeMs() {
    return updateTimeMs;
  }

  public void setUpdateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
  }

  public IndexVolume updateUser(String updateUser) {
    this.updateUser = updateUser;
    return this;
  }

   /**
   * Get updateUser
   * @return updateUser
  **/
  @Schema(description = "")
  public String getUpdateUser() {
    return updateUser;
  }

  public void setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
  }

  public IndexVolume version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexVolume indexVolume = (IndexVolume) o;
    return Objects.equals(this.bytesFree, indexVolume.bytesFree) &&
        Objects.equals(this.bytesLimit, indexVolume.bytesLimit) &&
        Objects.equals(this.bytesTotal, indexVolume.bytesTotal) &&
        Objects.equals(this.bytesUsed, indexVolume.bytesUsed) &&
        Objects.equals(this.createTimeMs, indexVolume.createTimeMs) &&
        Objects.equals(this.createUser, indexVolume.createUser) &&
        Objects.equals(this.id, indexVolume.id) &&
        Objects.equals(this.indexVolumeGroupId, indexVolume.indexVolumeGroupId) &&
        Objects.equals(this.nodeName, indexVolume.nodeName) &&
        Objects.equals(this.path, indexVolume.path) &&
        Objects.equals(this.state, indexVolume.state) &&
        Objects.equals(this.statusMs, indexVolume.statusMs) &&
        Objects.equals(this.updateTimeMs, indexVolume.updateTimeMs) &&
        Objects.equals(this.updateUser, indexVolume.updateUser) &&
        Objects.equals(this.version, indexVolume.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesFree, bytesLimit, bytesTotal, bytesUsed, createTimeMs, createUser, id, indexVolumeGroupId, nodeName, path, state, statusMs, updateTimeMs, updateUser, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexVolume {\n");
    
    sb.append("    bytesFree: ").append(toIndentedString(bytesFree)).append("\n");
    sb.append("    bytesLimit: ").append(toIndentedString(bytesLimit)).append("\n");
    sb.append("    bytesTotal: ").append(toIndentedString(bytesTotal)).append("\n");
    sb.append("    bytesUsed: ").append(toIndentedString(bytesUsed)).append("\n");
    sb.append("    createTimeMs: ").append(toIndentedString(createTimeMs)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    indexVolumeGroupId: ").append(toIndentedString(indexVolumeGroupId)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusMs: ").append(toIndentedString(statusMs)).append("\n");
    sb.append("    updateTimeMs: ").append(toIndentedString(updateTimeMs)).append("\n");
    sb.append("    updateUser: ").append(toIndentedString(updateUser)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
