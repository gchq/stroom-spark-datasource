/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ProcessorFilter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ProcessorTask
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ProcessorTask {
  @SerializedName("createTimeMs")
  private Long createTimeMs = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("endTimeMs")
  private Long endTimeMs = null;

  @SerializedName("feedName")
  private String feedName = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("metaId")
  private Long metaId = null;

  @SerializedName("nodeName")
  private String nodeName = null;

  @SerializedName("processorFilter")
  private ProcessorFilter processorFilter = null;

  @SerializedName("startTimeMs")
  private Long startTimeMs = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNPROCESSED("UNPROCESSED"),
    ASSIGNED("ASSIGNED"),
    PROCESSING("PROCESSING"),
    COMPLETE("COMPLETE"),
    FAILED("FAILED"),
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("statusTimeMs")
  private Long statusTimeMs = null;

  @SerializedName("version")
  private Integer version = null;

  public ProcessorTask createTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
    return this;
  }

   /**
   * Get createTimeMs
   * @return createTimeMs
  **/
  @Schema(description = "")
  public Long getCreateTimeMs() {
    return createTimeMs;
  }

  public void setCreateTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
  }

  public ProcessorTask data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @Schema(description = "")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public ProcessorTask endTimeMs(Long endTimeMs) {
    this.endTimeMs = endTimeMs;
    return this;
  }

   /**
   * Get endTimeMs
   * @return endTimeMs
  **/
  @Schema(description = "")
  public Long getEndTimeMs() {
    return endTimeMs;
  }

  public void setEndTimeMs(Long endTimeMs) {
    this.endTimeMs = endTimeMs;
  }

  public ProcessorTask feedName(String feedName) {
    this.feedName = feedName;
    return this;
  }

   /**
   * Get feedName
   * @return feedName
  **/
  @Schema(description = "")
  public String getFeedName() {
    return feedName;
  }

  public void setFeedName(String feedName) {
    this.feedName = feedName;
  }

  public ProcessorTask id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ProcessorTask metaId(Long metaId) {
    this.metaId = metaId;
    return this;
  }

   /**
   * Get metaId
   * @return metaId
  **/
  @Schema(description = "")
  public Long getMetaId() {
    return metaId;
  }

  public void setMetaId(Long metaId) {
    this.metaId = metaId;
  }

  public ProcessorTask nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public ProcessorTask processorFilter(ProcessorFilter processorFilter) {
    this.processorFilter = processorFilter;
    return this;
  }

   /**
   * Get processorFilter
   * @return processorFilter
  **/
  @Schema(description = "")
  public ProcessorFilter getProcessorFilter() {
    return processorFilter;
  }

  public void setProcessorFilter(ProcessorFilter processorFilter) {
    this.processorFilter = processorFilter;
  }

  public ProcessorTask startTimeMs(Long startTimeMs) {
    this.startTimeMs = startTimeMs;
    return this;
  }

   /**
   * Get startTimeMs
   * @return startTimeMs
  **/
  @Schema(description = "")
  public Long getStartTimeMs() {
    return startTimeMs;
  }

  public void setStartTimeMs(Long startTimeMs) {
    this.startTimeMs = startTimeMs;
  }

  public ProcessorTask status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ProcessorTask statusTimeMs(Long statusTimeMs) {
    this.statusTimeMs = statusTimeMs;
    return this;
  }

   /**
   * Get statusTimeMs
   * @return statusTimeMs
  **/
  @Schema(description = "")
  public Long getStatusTimeMs() {
    return statusTimeMs;
  }

  public void setStatusTimeMs(Long statusTimeMs) {
    this.statusTimeMs = statusTimeMs;
  }

  public ProcessorTask version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessorTask processorTask = (ProcessorTask) o;
    return Objects.equals(this.createTimeMs, processorTask.createTimeMs) &&
        Objects.equals(this.data, processorTask.data) &&
        Objects.equals(this.endTimeMs, processorTask.endTimeMs) &&
        Objects.equals(this.feedName, processorTask.feedName) &&
        Objects.equals(this.id, processorTask.id) &&
        Objects.equals(this.metaId, processorTask.metaId) &&
        Objects.equals(this.nodeName, processorTask.nodeName) &&
        Objects.equals(this.processorFilter, processorTask.processorFilter) &&
        Objects.equals(this.startTimeMs, processorTask.startTimeMs) &&
        Objects.equals(this.status, processorTask.status) &&
        Objects.equals(this.statusTimeMs, processorTask.statusTimeMs) &&
        Objects.equals(this.version, processorTask.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTimeMs, data, endTimeMs, feedName, id, metaId, nodeName, processorFilter, startTimeMs, status, statusTimeMs, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessorTask {\n");
    
    sb.append("    createTimeMs: ").append(toIndentedString(createTimeMs)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    endTimeMs: ").append(toIndentedString(endTimeMs)).append("\n");
    sb.append("    feedName: ").append(toIndentedString(feedName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metaId: ").append(toIndentedString(metaId)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    processorFilter: ").append(toIndentedString(processorFilter)).append("\n");
    sb.append("    startTimeMs: ").append(toIndentedString(startTimeMs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusTimeMs: ").append(toIndentedString(statusTimeMs)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
