/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SharedStepData;
import io.swagger.client.model.StepLocation;
import io.swagger.client.model.SteppingFilterSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * SteppingResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class SteppingResult {
  @SerializedName("currentStreamOffset")
  private Integer currentStreamOffset = null;

  @SerializedName("foundRecord")
  private Boolean foundRecord = null;

  @SerializedName("generalErrors")
  private List<String> generalErrors = null;

  @SerializedName("segmentedData")
  private Boolean segmentedData = null;

  @SerializedName("stepData")
  private SharedStepData stepData = null;

  @SerializedName("stepFilterMap")
  private Map<String, SteppingFilterSettings> stepFilterMap = null;

  @SerializedName("stepLocation")
  private StepLocation stepLocation = null;

  public SteppingResult currentStreamOffset(Integer currentStreamOffset) {
    this.currentStreamOffset = currentStreamOffset;
    return this;
  }

   /**
   * Get currentStreamOffset
   * @return currentStreamOffset
  **/
  @Schema(description = "")
  public Integer getCurrentStreamOffset() {
    return currentStreamOffset;
  }

  public void setCurrentStreamOffset(Integer currentStreamOffset) {
    this.currentStreamOffset = currentStreamOffset;
  }

  public SteppingResult foundRecord(Boolean foundRecord) {
    this.foundRecord = foundRecord;
    return this;
  }

   /**
   * Get foundRecord
   * @return foundRecord
  **/
  @Schema(description = "")
  public Boolean isFoundRecord() {
    return foundRecord;
  }

  public void setFoundRecord(Boolean foundRecord) {
    this.foundRecord = foundRecord;
  }

  public SteppingResult generalErrors(List<String> generalErrors) {
    this.generalErrors = generalErrors;
    return this;
  }

  public SteppingResult addGeneralErrorsItem(String generalErrorsItem) {
    if (this.generalErrors == null) {
      this.generalErrors = new ArrayList<String>();
    }
    this.generalErrors.add(generalErrorsItem);
    return this;
  }

   /**
   * Get generalErrors
   * @return generalErrors
  **/
  @Schema(description = "")
  public List<String> getGeneralErrors() {
    return generalErrors;
  }

  public void setGeneralErrors(List<String> generalErrors) {
    this.generalErrors = generalErrors;
  }

  public SteppingResult segmentedData(Boolean segmentedData) {
    this.segmentedData = segmentedData;
    return this;
  }

   /**
   * Get segmentedData
   * @return segmentedData
  **/
  @Schema(description = "")
  public Boolean isSegmentedData() {
    return segmentedData;
  }

  public void setSegmentedData(Boolean segmentedData) {
    this.segmentedData = segmentedData;
  }

  public SteppingResult stepData(SharedStepData stepData) {
    this.stepData = stepData;
    return this;
  }

   /**
   * Get stepData
   * @return stepData
  **/
  @Schema(description = "")
  public SharedStepData getStepData() {
    return stepData;
  }

  public void setStepData(SharedStepData stepData) {
    this.stepData = stepData;
  }

  public SteppingResult stepFilterMap(Map<String, SteppingFilterSettings> stepFilterMap) {
    this.stepFilterMap = stepFilterMap;
    return this;
  }

  public SteppingResult putStepFilterMapItem(String key, SteppingFilterSettings stepFilterMapItem) {
    if (this.stepFilterMap == null) {
      this.stepFilterMap = new HashMap<String, SteppingFilterSettings>();
    }
    this.stepFilterMap.put(key, stepFilterMapItem);
    return this;
  }

   /**
   * Get stepFilterMap
   * @return stepFilterMap
  **/
  @Schema(description = "")
  public Map<String, SteppingFilterSettings> getStepFilterMap() {
    return stepFilterMap;
  }

  public void setStepFilterMap(Map<String, SteppingFilterSettings> stepFilterMap) {
    this.stepFilterMap = stepFilterMap;
  }

  public SteppingResult stepLocation(StepLocation stepLocation) {
    this.stepLocation = stepLocation;
    return this;
  }

   /**
   * Get stepLocation
   * @return stepLocation
  **/
  @Schema(description = "")
  public StepLocation getStepLocation() {
    return stepLocation;
  }

  public void setStepLocation(StepLocation stepLocation) {
    this.stepLocation = stepLocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SteppingResult steppingResult = (SteppingResult) o;
    return Objects.equals(this.currentStreamOffset, steppingResult.currentStreamOffset) &&
        Objects.equals(this.foundRecord, steppingResult.foundRecord) &&
        Objects.equals(this.generalErrors, steppingResult.generalErrors) &&
        Objects.equals(this.segmentedData, steppingResult.segmentedData) &&
        Objects.equals(this.stepData, steppingResult.stepData) &&
        Objects.equals(this.stepFilterMap, steppingResult.stepFilterMap) &&
        Objects.equals(this.stepLocation, steppingResult.stepLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStreamOffset, foundRecord, generalErrors, segmentedData, stepData, stepFilterMap, stepLocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SteppingResult {\n");
    
    sb.append("    currentStreamOffset: ").append(toIndentedString(currentStreamOffset)).append("\n");
    sb.append("    foundRecord: ").append(toIndentedString(foundRecord)).append("\n");
    sb.append("    generalErrors: ").append(toIndentedString(generalErrors)).append("\n");
    sb.append("    segmentedData: ").append(toIndentedString(segmentedData)).append("\n");
    sb.append("    stepData: ").append(toIndentedString(stepData)).append("\n");
    sb.append("    stepFilterMap: ").append(toIndentedString(stepFilterMap)).append("\n");
    sb.append("    stepLocation: ").append(toIndentedString(stepLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
