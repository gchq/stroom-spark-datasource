/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.StoredError;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Indicators
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class Indicators {
  @SerializedName("errorCount")
  private Map<String, Integer> errorCount = null;

  @SerializedName("errorList")
  private List<StoredError> errorList = null;

  @SerializedName("uniqueErrorSet")
  private List<StoredError> uniqueErrorSet = null;

  public Indicators errorCount(Map<String, Integer> errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  public Indicators putErrorCountItem(String key, Integer errorCountItem) {
    if (this.errorCount == null) {
      this.errorCount = new HashMap<String, Integer>();
    }
    this.errorCount.put(key, errorCountItem);
    return this;
  }

   /**
   * Get errorCount
   * @return errorCount
  **/
  @Schema(description = "")
  public Map<String, Integer> getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Map<String, Integer> errorCount) {
    this.errorCount = errorCount;
  }

  public Indicators errorList(List<StoredError> errorList) {
    this.errorList = errorList;
    return this;
  }

  public Indicators addErrorListItem(StoredError errorListItem) {
    if (this.errorList == null) {
      this.errorList = new ArrayList<StoredError>();
    }
    this.errorList.add(errorListItem);
    return this;
  }

   /**
   * Get errorList
   * @return errorList
  **/
  @Schema(description = "")
  public List<StoredError> getErrorList() {
    return errorList;
  }

  public void setErrorList(List<StoredError> errorList) {
    this.errorList = errorList;
  }

  public Indicators uniqueErrorSet(List<StoredError> uniqueErrorSet) {
    this.uniqueErrorSet = uniqueErrorSet;
    return this;
  }

  public Indicators addUniqueErrorSetItem(StoredError uniqueErrorSetItem) {
    if (this.uniqueErrorSet == null) {
      this.uniqueErrorSet = new ArrayList<StoredError>();
    }
    this.uniqueErrorSet.add(uniqueErrorSetItem);
    return this;
  }

   /**
   * Get uniqueErrorSet
   * @return uniqueErrorSet
  **/
  @Schema(description = "")
  public List<StoredError> getUniqueErrorSet() {
    return uniqueErrorSet;
  }

  public void setUniqueErrorSet(List<StoredError> uniqueErrorSet) {
    this.uniqueErrorSet = uniqueErrorSet;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Indicators indicators = (Indicators) o;
    return Objects.equals(this.errorCount, indicators.errorCount) &&
        Objects.equals(this.errorList, indicators.errorList) &&
        Objects.equals(this.uniqueErrorSet, indicators.uniqueErrorSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCount, errorList, uniqueErrorSet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Indicators {\n");
    
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    errorList: ").append(toIndentedString(errorList)).append("\n");
    sb.append("    uniqueErrorSet: ").append(toIndentedString(uniqueErrorSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
