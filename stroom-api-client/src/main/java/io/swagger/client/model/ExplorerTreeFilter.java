/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ExplorerTreeFilter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ExplorerTreeFilter {
  @SerializedName("includedTypes")
  private List<String> includedTypes = null;

  @SerializedName("nameFilter")
  private String nameFilter = null;

  @SerializedName("nameFilterChange")
  private Boolean nameFilterChange = null;

  @SerializedName("requiredPermissions")
  private List<String> requiredPermissions = null;

  @SerializedName("tags")
  private List<String> tags = null;

  public ExplorerTreeFilter includedTypes(List<String> includedTypes) {
    this.includedTypes = includedTypes;
    return this;
  }

  public ExplorerTreeFilter addIncludedTypesItem(String includedTypesItem) {
    if (this.includedTypes == null) {
      this.includedTypes = new ArrayList<String>();
    }
    this.includedTypes.add(includedTypesItem);
    return this;
  }

   /**
   * Get includedTypes
   * @return includedTypes
  **/
  @Schema(description = "")
  public List<String> getIncludedTypes() {
    return includedTypes;
  }

  public void setIncludedTypes(List<String> includedTypes) {
    this.includedTypes = includedTypes;
  }

  public ExplorerTreeFilter nameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
    return this;
  }

   /**
   * Get nameFilter
   * @return nameFilter
  **/
  @Schema(description = "")
  public String getNameFilter() {
    return nameFilter;
  }

  public void setNameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
  }

  public ExplorerTreeFilter nameFilterChange(Boolean nameFilterChange) {
    this.nameFilterChange = nameFilterChange;
    return this;
  }

   /**
   * Get nameFilterChange
   * @return nameFilterChange
  **/
  @Schema(description = "")
  public Boolean isNameFilterChange() {
    return nameFilterChange;
  }

  public void setNameFilterChange(Boolean nameFilterChange) {
    this.nameFilterChange = nameFilterChange;
  }

  public ExplorerTreeFilter requiredPermissions(List<String> requiredPermissions) {
    this.requiredPermissions = requiredPermissions;
    return this;
  }

  public ExplorerTreeFilter addRequiredPermissionsItem(String requiredPermissionsItem) {
    if (this.requiredPermissions == null) {
      this.requiredPermissions = new ArrayList<String>();
    }
    this.requiredPermissions.add(requiredPermissionsItem);
    return this;
  }

   /**
   * Get requiredPermissions
   * @return requiredPermissions
  **/
  @Schema(description = "")
  public List<String> getRequiredPermissions() {
    return requiredPermissions;
  }

  public void setRequiredPermissions(List<String> requiredPermissions) {
    this.requiredPermissions = requiredPermissions;
  }

  public ExplorerTreeFilter tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ExplorerTreeFilter addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplorerTreeFilter explorerTreeFilter = (ExplorerTreeFilter) o;
    return Objects.equals(this.includedTypes, explorerTreeFilter.includedTypes) &&
        Objects.equals(this.nameFilter, explorerTreeFilter.nameFilter) &&
        Objects.equals(this.nameFilterChange, explorerTreeFilter.nameFilterChange) &&
        Objects.equals(this.requiredPermissions, explorerTreeFilter.requiredPermissions) &&
        Objects.equals(this.tags, explorerTreeFilter.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includedTypes, nameFilter, nameFilterChange, requiredPermissions, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplorerTreeFilter {\n");
    
    sb.append("    includedTypes: ").append(toIndentedString(includedTypes)).append("\n");
    sb.append("    nameFilter: ").append(toIndentedString(nameFilter)).append("\n");
    sb.append("    nameFilterChange: ").append(toIndentedString(nameFilterChange)).append("\n");
    sb.append("    requiredPermissions: ").append(toIndentedString(requiredPermissions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
