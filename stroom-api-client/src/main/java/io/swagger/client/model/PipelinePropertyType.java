/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PipelineElementType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PipelinePropertyType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class PipelinePropertyType {
  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("displayPriority")
  private Integer displayPriority = null;

  @SerializedName("docRefTypes")
  private List<String> docRefTypes = null;

  @SerializedName("elementType")
  private PipelineElementType elementType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("pipelineReference")
  private Boolean pipelineReference = null;

  @SerializedName("type")
  private String type = null;

  public PipelinePropertyType defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @Schema(description = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public PipelinePropertyType description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PipelinePropertyType displayPriority(Integer displayPriority) {
    this.displayPriority = displayPriority;
    return this;
  }

   /**
   * Get displayPriority
   * @return displayPriority
  **/
  @Schema(description = "")
  public Integer getDisplayPriority() {
    return displayPriority;
  }

  public void setDisplayPriority(Integer displayPriority) {
    this.displayPriority = displayPriority;
  }

  public PipelinePropertyType docRefTypes(List<String> docRefTypes) {
    this.docRefTypes = docRefTypes;
    return this;
  }

  public PipelinePropertyType addDocRefTypesItem(String docRefTypesItem) {
    if (this.docRefTypes == null) {
      this.docRefTypes = new ArrayList<String>();
    }
    this.docRefTypes.add(docRefTypesItem);
    return this;
  }

   /**
   * Get docRefTypes
   * @return docRefTypes
  **/
  @Schema(description = "")
  public List<String> getDocRefTypes() {
    return docRefTypes;
  }

  public void setDocRefTypes(List<String> docRefTypes) {
    this.docRefTypes = docRefTypes;
  }

  public PipelinePropertyType elementType(PipelineElementType elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @Schema(description = "")
  public PipelineElementType getElementType() {
    return elementType;
  }

  public void setElementType(PipelineElementType elementType) {
    this.elementType = elementType;
  }

  public PipelinePropertyType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PipelinePropertyType pipelineReference(Boolean pipelineReference) {
    this.pipelineReference = pipelineReference;
    return this;
  }

   /**
   * Get pipelineReference
   * @return pipelineReference
  **/
  @Schema(description = "")
  public Boolean isPipelineReference() {
    return pipelineReference;
  }

  public void setPipelineReference(Boolean pipelineReference) {
    this.pipelineReference = pipelineReference;
  }

  public PipelinePropertyType type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelinePropertyType pipelinePropertyType = (PipelinePropertyType) o;
    return Objects.equals(this.defaultValue, pipelinePropertyType.defaultValue) &&
        Objects.equals(this.description, pipelinePropertyType.description) &&
        Objects.equals(this.displayPriority, pipelinePropertyType.displayPriority) &&
        Objects.equals(this.docRefTypes, pipelinePropertyType.docRefTypes) &&
        Objects.equals(this.elementType, pipelinePropertyType.elementType) &&
        Objects.equals(this.name, pipelinePropertyType.name) &&
        Objects.equals(this.pipelineReference, pipelinePropertyType.pipelineReference) &&
        Objects.equals(this.type, pipelinePropertyType.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue, description, displayPriority, docRefTypes, elementType, name, pipelineReference, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelinePropertyType {\n");
    
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayPriority: ").append(toIndentedString(displayPriority)).append("\n");
    sb.append("    docRefTypes: ").append(toIndentedString(docRefTypes)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pipelineReference: ").append(toIndentedString(pipelineReference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
