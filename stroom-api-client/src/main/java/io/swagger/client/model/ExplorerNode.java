/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExplorerNode;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ExplorerNode
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ExplorerNode {
  @SerializedName("children")
  private List<ExplorerNode> children = null;

  @SerializedName("depth")
  private Integer depth = null;

  @SerializedName("iconUrl")
  private String iconUrl = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets nodeState
   */
  @JsonAdapter(NodeStateEnum.Adapter.class)
  public enum NodeStateEnum {
    OPEN("OPEN"),
    CLOSED("CLOSED"),
    LEAF("LEAF");

    private String value;

    NodeStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NodeStateEnum fromValue(String text) {
      for (NodeStateEnum b : NodeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NodeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NodeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("nodeState")
  private NodeStateEnum nodeState = null;

  @SerializedName("tags")
  private String tags = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("uuid")
  private String uuid = null;

  public ExplorerNode children(List<ExplorerNode> children) {
    this.children = children;
    return this;
  }

  public ExplorerNode addChildrenItem(ExplorerNode childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<ExplorerNode>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @Schema(description = "")
  public List<ExplorerNode> getChildren() {
    return children;
  }

  public void setChildren(List<ExplorerNode> children) {
    this.children = children;
  }

  public ExplorerNode depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Get depth
   * @return depth
  **/
  @Schema(description = "")
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }

  public ExplorerNode iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

   /**
   * Get iconUrl
   * @return iconUrl
  **/
  @Schema(description = "")
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }

  public ExplorerNode name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ExplorerNode nodeState(NodeStateEnum nodeState) {
    this.nodeState = nodeState;
    return this;
  }

   /**
   * Get nodeState
   * @return nodeState
  **/
  @Schema(description = "")
  public NodeStateEnum getNodeState() {
    return nodeState;
  }

  public void setNodeState(NodeStateEnum nodeState) {
    this.nodeState = nodeState;
  }

  public ExplorerNode tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }

  public ExplorerNode type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ExplorerNode uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplorerNode explorerNode = (ExplorerNode) o;
    return Objects.equals(this.children, explorerNode.children) &&
        Objects.equals(this.depth, explorerNode.depth) &&
        Objects.equals(this.iconUrl, explorerNode.iconUrl) &&
        Objects.equals(this.name, explorerNode.name) &&
        Objects.equals(this.nodeState, explorerNode.nodeState) &&
        Objects.equals(this.tags, explorerNode.tags) &&
        Objects.equals(this.type, explorerNode.type) &&
        Objects.equals(this.uuid, explorerNode.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, depth, iconUrl, name, nodeState, tags, type, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplorerNode {\n");
    
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeState: ").append(toIndentedString(nodeState)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
