/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocumentType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DocumentTypes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class DocumentTypes {
  @SerializedName("nonSystemTypes")
  private List<DocumentType> nonSystemTypes = null;

  @SerializedName("visibleTypes")
  private List<DocumentType> visibleTypes = null;

  public DocumentTypes nonSystemTypes(List<DocumentType> nonSystemTypes) {
    this.nonSystemTypes = nonSystemTypes;
    return this;
  }

  public DocumentTypes addNonSystemTypesItem(DocumentType nonSystemTypesItem) {
    if (this.nonSystemTypes == null) {
      this.nonSystemTypes = new ArrayList<DocumentType>();
    }
    this.nonSystemTypes.add(nonSystemTypesItem);
    return this;
  }

   /**
   * Get nonSystemTypes
   * @return nonSystemTypes
  **/
  @Schema(description = "")
  public List<DocumentType> getNonSystemTypes() {
    return nonSystemTypes;
  }

  public void setNonSystemTypes(List<DocumentType> nonSystemTypes) {
    this.nonSystemTypes = nonSystemTypes;
  }

  public DocumentTypes visibleTypes(List<DocumentType> visibleTypes) {
    this.visibleTypes = visibleTypes;
    return this;
  }

  public DocumentTypes addVisibleTypesItem(DocumentType visibleTypesItem) {
    if (this.visibleTypes == null) {
      this.visibleTypes = new ArrayList<DocumentType>();
    }
    this.visibleTypes.add(visibleTypesItem);
    return this;
  }

   /**
   * Get visibleTypes
   * @return visibleTypes
  **/
  @Schema(description = "")
  public List<DocumentType> getVisibleTypes() {
    return visibleTypes;
  }

  public void setVisibleTypes(List<DocumentType> visibleTypes) {
    this.visibleTypes = visibleTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentTypes documentTypes = (DocumentTypes) o;
    return Objects.equals(this.nonSystemTypes, documentTypes.nonSystemTypes) &&
        Objects.equals(this.visibleTypes, documentTypes.visibleTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonSystemTypes, visibleTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentTypes {\n");
    
    sb.append("    nonSystemTypes: ").append(toIndentedString(nonSystemTypes)).append("\n");
    sb.append("    visibleTypes: ").append(toIndentedString(visibleTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
