/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Changes;
import io.swagger.client.model.DocRef;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ChangeDocumentPermissionsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ChangeDocumentPermissionsRequest {
  /**
   * Gets or Sets cascade
   */
  @JsonAdapter(CascadeEnum.Adapter.class)
  public enum CascadeEnum {
    NO("NO"),
    CHANGES_ONLY("CHANGES_ONLY"),
    ALL("ALL");

    private String value;

    CascadeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CascadeEnum fromValue(String text) {
      for (CascadeEnum b : CascadeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CascadeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CascadeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CascadeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CascadeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("cascade")
  private CascadeEnum cascade = null;

  @SerializedName("changes")
  private Changes changes = null;

  @SerializedName("docRef")
  private DocRef docRef = null;

  public ChangeDocumentPermissionsRequest cascade(CascadeEnum cascade) {
    this.cascade = cascade;
    return this;
  }

   /**
   * Get cascade
   * @return cascade
  **/
  @Schema(description = "")
  public CascadeEnum getCascade() {
    return cascade;
  }

  public void setCascade(CascadeEnum cascade) {
    this.cascade = cascade;
  }

  public ChangeDocumentPermissionsRequest changes(Changes changes) {
    this.changes = changes;
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @Schema(description = "")
  public Changes getChanges() {
    return changes;
  }

  public void setChanges(Changes changes) {
    this.changes = changes;
  }

  public ChangeDocumentPermissionsRequest docRef(DocRef docRef) {
    this.docRef = docRef;
    return this;
  }

   /**
   * Get docRef
   * @return docRef
  **/
  @Schema(description = "")
  public DocRef getDocRef() {
    return docRef;
  }

  public void setDocRef(DocRef docRef) {
    this.docRef = docRef;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeDocumentPermissionsRequest changeDocumentPermissionsRequest = (ChangeDocumentPermissionsRequest) o;
    return Objects.equals(this.cascade, changeDocumentPermissionsRequest.cascade) &&
        Objects.equals(this.changes, changeDocumentPermissionsRequest.changes) &&
        Objects.equals(this.docRef, changeDocumentPermissionsRequest.docRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cascade, changes, docRef);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeDocumentPermissionsRequest {\n");
    
    sb.append("    cascade: ").append(toIndentedString(cascade)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    docRef: ").append(toIndentedString(docRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
