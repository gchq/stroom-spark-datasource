/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CriteriaFieldSort;
import io.swagger.client.model.PageRequest;
import io.swagger.client.model.StringCriteria;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FindStoredQueryCriteria
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FindStoredQueryCriteria {
  @SerializedName("componentId")
  private String componentId = null;

  @SerializedName("dashboardUuid")
  private String dashboardUuid = null;

  @SerializedName("favourite")
  private Boolean favourite = null;

  @SerializedName("name")
  private StringCriteria name = null;

  @SerializedName("pageRequest")
  private PageRequest pageRequest = null;

  @SerializedName("requiredPermission")
  private String requiredPermission = null;

  @SerializedName("sort")
  private String sort = null;

  @SerializedName("sortList")
  private List<CriteriaFieldSort> sortList = null;

  @SerializedName("userId")
  private String userId = null;

  public FindStoredQueryCriteria componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * Get componentId
   * @return componentId
  **/
  @Schema(description = "")
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }

  public FindStoredQueryCriteria dashboardUuid(String dashboardUuid) {
    this.dashboardUuid = dashboardUuid;
    return this;
  }

   /**
   * Get dashboardUuid
   * @return dashboardUuid
  **/
  @Schema(description = "")
  public String getDashboardUuid() {
    return dashboardUuid;
  }

  public void setDashboardUuid(String dashboardUuid) {
    this.dashboardUuid = dashboardUuid;
  }

  public FindStoredQueryCriteria favourite(Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

   /**
   * Get favourite
   * @return favourite
  **/
  @Schema(description = "")
  public Boolean isFavourite() {
    return favourite;
  }

  public void setFavourite(Boolean favourite) {
    this.favourite = favourite;
  }

  public FindStoredQueryCriteria name(StringCriteria name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public StringCriteria getName() {
    return name;
  }

  public void setName(StringCriteria name) {
    this.name = name;
  }

  public FindStoredQueryCriteria pageRequest(PageRequest pageRequest) {
    this.pageRequest = pageRequest;
    return this;
  }

   /**
   * Get pageRequest
   * @return pageRequest
  **/
  @Schema(description = "")
  public PageRequest getPageRequest() {
    return pageRequest;
  }

  public void setPageRequest(PageRequest pageRequest) {
    this.pageRequest = pageRequest;
  }

  public FindStoredQueryCriteria requiredPermission(String requiredPermission) {
    this.requiredPermission = requiredPermission;
    return this;
  }

   /**
   * Get requiredPermission
   * @return requiredPermission
  **/
  @Schema(description = "")
  public String getRequiredPermission() {
    return requiredPermission;
  }

  public void setRequiredPermission(String requiredPermission) {
    this.requiredPermission = requiredPermission;
  }

  public FindStoredQueryCriteria sort(String sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @Schema(description = "")
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }

  public FindStoredQueryCriteria sortList(List<CriteriaFieldSort> sortList) {
    this.sortList = sortList;
    return this;
  }

  public FindStoredQueryCriteria addSortListItem(CriteriaFieldSort sortListItem) {
    if (this.sortList == null) {
      this.sortList = new ArrayList<CriteriaFieldSort>();
    }
    this.sortList.add(sortListItem);
    return this;
  }

   /**
   * Get sortList
   * @return sortList
  **/
  @Schema(description = "")
  public List<CriteriaFieldSort> getSortList() {
    return sortList;
  }

  public void setSortList(List<CriteriaFieldSort> sortList) {
    this.sortList = sortList;
  }

  public FindStoredQueryCriteria userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @Schema(description = "")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindStoredQueryCriteria findStoredQueryCriteria = (FindStoredQueryCriteria) o;
    return Objects.equals(this.componentId, findStoredQueryCriteria.componentId) &&
        Objects.equals(this.dashboardUuid, findStoredQueryCriteria.dashboardUuid) &&
        Objects.equals(this.favourite, findStoredQueryCriteria.favourite) &&
        Objects.equals(this.name, findStoredQueryCriteria.name) &&
        Objects.equals(this.pageRequest, findStoredQueryCriteria.pageRequest) &&
        Objects.equals(this.requiredPermission, findStoredQueryCriteria.requiredPermission) &&
        Objects.equals(this.sort, findStoredQueryCriteria.sort) &&
        Objects.equals(this.sortList, findStoredQueryCriteria.sortList) &&
        Objects.equals(this.userId, findStoredQueryCriteria.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentId, dashboardUuid, favourite, name, pageRequest, requiredPermission, sort, sortList, userId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindStoredQueryCriteria {\n");
    
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    dashboardUuid: ").append(toIndentedString(dashboardUuid)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageRequest: ").append(toIndentedString(pageRequest)).append("\n");
    sb.append("    requiredPermission: ").append(toIndentedString(requiredPermission)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    sortList: ").append(toIndentedString(sortList)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
