/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Arg
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class Arg {
  @SerializedName("allowedValues")
  private List<String> allowedValues = null;

  /**
   * Gets or Sets argType
   */
  @JsonAdapter(ArgTypeEnum.Adapter.class)
  public enum ArgTypeEnum {
    UNKNOWN("UNKNOWN"),
    BOOLEAN("BOOLEAN"),
    DOUBLE("DOUBLE"),
    ERROR("ERROR"),
    INTEGER("INTEGER"),
    LONG("LONG"),
    NULL("NULL"),
    NUMBER("NUMBER"),
    STRING("STRING");

    private String value;

    ArgTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ArgTypeEnum fromValue(String text) {
      for (ArgTypeEnum b : ArgTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ArgTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArgTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArgTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ArgTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("argType")
  private ArgTypeEnum argType = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("minVarargsCount")
  private Integer minVarargsCount = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("varargs")
  private Boolean varargs = null;

  public Arg allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public Arg addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<String>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

   /**
   * Get allowedValues
   * @return allowedValues
  **/
  @Schema(description = "")
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }

  public Arg argType(ArgTypeEnum argType) {
    this.argType = argType;
    return this;
  }

   /**
   * Get argType
   * @return argType
  **/
  @Schema(description = "")
  public ArgTypeEnum getArgType() {
    return argType;
  }

  public void setArgType(ArgTypeEnum argType) {
    this.argType = argType;
  }

  public Arg defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @Schema(description = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public Arg description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Arg minVarargsCount(Integer minVarargsCount) {
    this.minVarargsCount = minVarargsCount;
    return this;
  }

   /**
   * Get minVarargsCount
   * @return minVarargsCount
  **/
  @Schema(description = "")
  public Integer getMinVarargsCount() {
    return minVarargsCount;
  }

  public void setMinVarargsCount(Integer minVarargsCount) {
    this.minVarargsCount = minVarargsCount;
  }

  public Arg name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Arg optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * Get optional
   * @return optional
  **/
  @Schema(description = "")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public Arg varargs(Boolean varargs) {
    this.varargs = varargs;
    return this;
  }

   /**
   * Get varargs
   * @return varargs
  **/
  @Schema(description = "")
  public Boolean isVarargs() {
    return varargs;
  }

  public void setVarargs(Boolean varargs) {
    this.varargs = varargs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Arg arg = (Arg) o;
    return Objects.equals(this.allowedValues, arg.allowedValues) &&
        Objects.equals(this.argType, arg.argType) &&
        Objects.equals(this.defaultValue, arg.defaultValue) &&
        Objects.equals(this.description, arg.description) &&
        Objects.equals(this.minVarargsCount, arg.minVarargsCount) &&
        Objects.equals(this.name, arg.name) &&
        Objects.equals(this.optional, arg.optional) &&
        Objects.equals(this.varargs, arg.varargs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, argType, defaultValue, description, minVarargsCount, name, optional, varargs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Arg {\n");
    
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    argType: ").append(toIndentedString(argType)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    minVarargsCount: ").append(toIndentedString(minVarargsCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    varargs: ").append(toIndentedString(varargs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
