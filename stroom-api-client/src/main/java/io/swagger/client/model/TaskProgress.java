/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Expander;
import io.swagger.client.model.TaskId;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TaskProgress
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class TaskProgress {
  @SerializedName("expander")
  private Expander expander = null;

  /**
   * Gets or Sets filterMatchState
   */
  @JsonAdapter(FilterMatchStateEnum.Adapter.class)
  public enum FilterMatchStateEnum {
    MATCHED("MATCHED"),
    NOT_MATCHED("NOT_MATCHED");

    private String value;

    FilterMatchStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FilterMatchStateEnum fromValue(String text) {
      for (FilterMatchStateEnum b : FilterMatchStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FilterMatchStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterMatchStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterMatchStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FilterMatchStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("filterMatchState")
  private FilterMatchStateEnum filterMatchState = null;

  @SerializedName("id")
  private TaskId id = null;

  @SerializedName("nodeName")
  private String nodeName = null;

  @SerializedName("submitTimeMs")
  private Long submitTimeMs = null;

  @SerializedName("taskInfo")
  private String taskInfo = null;

  @SerializedName("taskName")
  private String taskName = null;

  @SerializedName("threadName")
  private String threadName = null;

  @SerializedName("timeNowMs")
  private Long timeNowMs = null;

  @SerializedName("userName")
  private String userName = null;

  public TaskProgress expander(Expander expander) {
    this.expander = expander;
    return this;
  }

   /**
   * Get expander
   * @return expander
  **/
  @Schema(description = "")
  public Expander getExpander() {
    return expander;
  }

  public void setExpander(Expander expander) {
    this.expander = expander;
  }

  public TaskProgress filterMatchState(FilterMatchStateEnum filterMatchState) {
    this.filterMatchState = filterMatchState;
    return this;
  }

   /**
   * Get filterMatchState
   * @return filterMatchState
  **/
  @Schema(description = "")
  public FilterMatchStateEnum getFilterMatchState() {
    return filterMatchState;
  }

  public void setFilterMatchState(FilterMatchStateEnum filterMatchState) {
    this.filterMatchState = filterMatchState;
  }

  public TaskProgress id(TaskId id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public TaskId getId() {
    return id;
  }

  public void setId(TaskId id) {
    this.id = id;
  }

  public TaskProgress nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public TaskProgress submitTimeMs(Long submitTimeMs) {
    this.submitTimeMs = submitTimeMs;
    return this;
  }

   /**
   * Get submitTimeMs
   * @return submitTimeMs
  **/
  @Schema(description = "")
  public Long getSubmitTimeMs() {
    return submitTimeMs;
  }

  public void setSubmitTimeMs(Long submitTimeMs) {
    this.submitTimeMs = submitTimeMs;
  }

  public TaskProgress taskInfo(String taskInfo) {
    this.taskInfo = taskInfo;
    return this;
  }

   /**
   * Get taskInfo
   * @return taskInfo
  **/
  @Schema(description = "")
  public String getTaskInfo() {
    return taskInfo;
  }

  public void setTaskInfo(String taskInfo) {
    this.taskInfo = taskInfo;
  }

  public TaskProgress taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @Schema(description = "")
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }

  public TaskProgress threadName(String threadName) {
    this.threadName = threadName;
    return this;
  }

   /**
   * Get threadName
   * @return threadName
  **/
  @Schema(description = "")
  public String getThreadName() {
    return threadName;
  }

  public void setThreadName(String threadName) {
    this.threadName = threadName;
  }

  public TaskProgress timeNowMs(Long timeNowMs) {
    this.timeNowMs = timeNowMs;
    return this;
  }

   /**
   * Get timeNowMs
   * @return timeNowMs
  **/
  @Schema(description = "")
  public Long getTimeNowMs() {
    return timeNowMs;
  }

  public void setTimeNowMs(Long timeNowMs) {
    this.timeNowMs = timeNowMs;
  }

  public TaskProgress userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @Schema(description = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskProgress taskProgress = (TaskProgress) o;
    return Objects.equals(this.expander, taskProgress.expander) &&
        Objects.equals(this.filterMatchState, taskProgress.filterMatchState) &&
        Objects.equals(this.id, taskProgress.id) &&
        Objects.equals(this.nodeName, taskProgress.nodeName) &&
        Objects.equals(this.submitTimeMs, taskProgress.submitTimeMs) &&
        Objects.equals(this.taskInfo, taskProgress.taskInfo) &&
        Objects.equals(this.taskName, taskProgress.taskName) &&
        Objects.equals(this.threadName, taskProgress.threadName) &&
        Objects.equals(this.timeNowMs, taskProgress.timeNowMs) &&
        Objects.equals(this.userName, taskProgress.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expander, filterMatchState, id, nodeName, submitTimeMs, taskInfo, taskName, threadName, timeNowMs, userName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskProgress {\n");
    
    sb.append("    expander: ").append(toIndentedString(expander)).append("\n");
    sb.append("    filterMatchState: ").append(toIndentedString(filterMatchState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    submitTimeMs: ").append(toIndentedString(submitTimeMs)).append("\n");
    sb.append("    taskInfo: ").append(toIndentedString(taskInfo)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    threadName: ").append(toIndentedString(threadName)).append("\n");
    sb.append("    timeNowMs: ").append(toIndentedString(timeNowMs)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
