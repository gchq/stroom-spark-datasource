/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ComponentSettings;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.ExpressionOperator;
import io.swagger.client.model.Param;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Search
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class Search {
  @SerializedName("componentSettingsMap")
  private Map<String, ComponentSettings> componentSettingsMap = null;

  @SerializedName("dataSourceRef")
  private DocRef dataSourceRef = null;

  @SerializedName("expression")
  private ExpressionOperator expression = null;

  @SerializedName("incremental")
  private Boolean incremental = null;

  @SerializedName("params")
  private List<Param> params = null;

  @SerializedName("queryInfo")
  private String queryInfo = null;

  @SerializedName("storeHistory")
  private Boolean storeHistory = null;

  public Search componentSettingsMap(Map<String, ComponentSettings> componentSettingsMap) {
    this.componentSettingsMap = componentSettingsMap;
    return this;
  }

  public Search putComponentSettingsMapItem(String key, ComponentSettings componentSettingsMapItem) {
    if (this.componentSettingsMap == null) {
      this.componentSettingsMap = new HashMap<String, ComponentSettings>();
    }
    this.componentSettingsMap.put(key, componentSettingsMapItem);
    return this;
  }

   /**
   * Get componentSettingsMap
   * @return componentSettingsMap
  **/
  @Schema(description = "")
  public Map<String, ComponentSettings> getComponentSettingsMap() {
    return componentSettingsMap;
  }

  public void setComponentSettingsMap(Map<String, ComponentSettings> componentSettingsMap) {
    this.componentSettingsMap = componentSettingsMap;
  }

  public Search dataSourceRef(DocRef dataSourceRef) {
    this.dataSourceRef = dataSourceRef;
    return this;
  }

   /**
   * Get dataSourceRef
   * @return dataSourceRef
  **/
  @Schema(description = "")
  public DocRef getDataSourceRef() {
    return dataSourceRef;
  }

  public void setDataSourceRef(DocRef dataSourceRef) {
    this.dataSourceRef = dataSourceRef;
  }

  public Search expression(ExpressionOperator expression) {
    this.expression = expression;
    return this;
  }

   /**
   * Get expression
   * @return expression
  **/
  @Schema(description = "")
  public ExpressionOperator getExpression() {
    return expression;
  }

  public void setExpression(ExpressionOperator expression) {
    this.expression = expression;
  }

  public Search incremental(Boolean incremental) {
    this.incremental = incremental;
    return this;
  }

   /**
   * Get incremental
   * @return incremental
  **/
  @Schema(description = "")
  public Boolean isIncremental() {
    return incremental;
  }

  public void setIncremental(Boolean incremental) {
    this.incremental = incremental;
  }

  public Search params(List<Param> params) {
    this.params = params;
    return this;
  }

  public Search addParamsItem(Param paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<Param>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @Schema(description = "")
  public List<Param> getParams() {
    return params;
  }

  public void setParams(List<Param> params) {
    this.params = params;
  }

  public Search queryInfo(String queryInfo) {
    this.queryInfo = queryInfo;
    return this;
  }

   /**
   * Get queryInfo
   * @return queryInfo
  **/
  @Schema(description = "")
  public String getQueryInfo() {
    return queryInfo;
  }

  public void setQueryInfo(String queryInfo) {
    this.queryInfo = queryInfo;
  }

  public Search storeHistory(Boolean storeHistory) {
    this.storeHistory = storeHistory;
    return this;
  }

   /**
   * Get storeHistory
   * @return storeHistory
  **/
  @Schema(description = "")
  public Boolean isStoreHistory() {
    return storeHistory;
  }

  public void setStoreHistory(Boolean storeHistory) {
    this.storeHistory = storeHistory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Search search = (Search) o;
    return Objects.equals(this.componentSettingsMap, search.componentSettingsMap) &&
        Objects.equals(this.dataSourceRef, search.dataSourceRef) &&
        Objects.equals(this.expression, search.expression) &&
        Objects.equals(this.incremental, search.incremental) &&
        Objects.equals(this.params, search.params) &&
        Objects.equals(this.queryInfo, search.queryInfo) &&
        Objects.equals(this.storeHistory, search.storeHistory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentSettingsMap, dataSourceRef, expression, incremental, params, queryInfo, storeHistory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Search {\n");
    
    sb.append("    componentSettingsMap: ").append(toIndentedString(componentSettingsMap)).append("\n");
    sb.append("    dataSourceRef: ").append(toIndentedString(dataSourceRef)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    queryInfo: ").append(toIndentedString(queryInfo)).append("\n");
    sb.append("    storeHistory: ").append(toIndentedString(storeHistory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
