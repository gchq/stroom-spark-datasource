/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Job;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * JobNode
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class JobNode {
  @SerializedName("createTimeMs")
  private Long createTimeMs = null;

  @SerializedName("createUser")
  private String createUser = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("job")
  private Job job = null;

  /**
   * Gets or Sets jobType
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    UNKNOWN("UNKNOWN"),
    CRON("CRON"),
    FREQUENCY("FREQUENCY"),
    DISTRIBUTED("DISTRIBUTED");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static JobTypeEnum fromValue(String text) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return JobTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("jobType")
  private JobTypeEnum jobType = null;

  @SerializedName("nodeName")
  private String nodeName = null;

  @SerializedName("schedule")
  private String schedule = null;

  @SerializedName("taskLimit")
  private Integer taskLimit = null;

  @SerializedName("updateTimeMs")
  private Long updateTimeMs = null;

  @SerializedName("updateUser")
  private String updateUser = null;

  @SerializedName("version")
  private Integer version = null;

  public JobNode createTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
    return this;
  }

   /**
   * Get createTimeMs
   * @return createTimeMs
  **/
  @Schema(description = "")
  public Long getCreateTimeMs() {
    return createTimeMs;
  }

  public void setCreateTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
  }

  public JobNode createUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

   /**
   * Get createUser
   * @return createUser
  **/
  @Schema(description = "")
  public String getCreateUser() {
    return createUser;
  }

  public void setCreateUser(String createUser) {
    this.createUser = createUser;
  }

  public JobNode enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public JobNode id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public JobNode job(Job job) {
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @Schema(description = "")
  public Job getJob() {
    return job;
  }

  public void setJob(Job job) {
    this.job = job;
  }

  public JobNode jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @Schema(description = "")
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }

  public JobNode nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public JobNode schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @Schema(description = "")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public JobNode taskLimit(Integer taskLimit) {
    this.taskLimit = taskLimit;
    return this;
  }

   /**
   * Get taskLimit
   * @return taskLimit
  **/
  @Schema(description = "")
  public Integer getTaskLimit() {
    return taskLimit;
  }

  public void setTaskLimit(Integer taskLimit) {
    this.taskLimit = taskLimit;
  }

  public JobNode updateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
    return this;
  }

   /**
   * Get updateTimeMs
   * @return updateTimeMs
  **/
  @Schema(description = "")
  public Long getUpdateTimeMs() {
    return updateTimeMs;
  }

  public void setUpdateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
  }

  public JobNode updateUser(String updateUser) {
    this.updateUser = updateUser;
    return this;
  }

   /**
   * Get updateUser
   * @return updateUser
  **/
  @Schema(description = "")
  public String getUpdateUser() {
    return updateUser;
  }

  public void setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
  }

  public JobNode version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobNode jobNode = (JobNode) o;
    return Objects.equals(this.createTimeMs, jobNode.createTimeMs) &&
        Objects.equals(this.createUser, jobNode.createUser) &&
        Objects.equals(this.enabled, jobNode.enabled) &&
        Objects.equals(this.id, jobNode.id) &&
        Objects.equals(this.job, jobNode.job) &&
        Objects.equals(this.jobType, jobNode.jobType) &&
        Objects.equals(this.nodeName, jobNode.nodeName) &&
        Objects.equals(this.schedule, jobNode.schedule) &&
        Objects.equals(this.taskLimit, jobNode.taskLimit) &&
        Objects.equals(this.updateTimeMs, jobNode.updateTimeMs) &&
        Objects.equals(this.updateUser, jobNode.updateUser) &&
        Objects.equals(this.version, jobNode.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTimeMs, createUser, enabled, id, job, jobType, nodeName, schedule, taskLimit, updateTimeMs, updateUser, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobNode {\n");
    
    sb.append("    createTimeMs: ").append(toIndentedString(createTimeMs)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    taskLimit: ").append(toIndentedString(taskLimit)).append("\n");
    sb.append("    updateTimeMs: ").append(toIndentedString(updateTimeMs)).append("\n");
    sb.append("    updateUser: ").append(toIndentedString(updateUser)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
