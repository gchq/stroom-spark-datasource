/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Arg;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FunctionSignature
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FunctionSignature {
  @SerializedName("aliases")
  private List<String> aliases = null;

  @SerializedName("args")
  private List<Arg> args = null;

  @SerializedName("categoryPath")
  private List<String> categoryPath = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("returnDescription")
  private String returnDescription = null;

  /**
   * Gets or Sets returnType
   */
  @JsonAdapter(ReturnTypeEnum.Adapter.class)
  public enum ReturnTypeEnum {
    UNKNOWN("UNKNOWN"),
    BOOLEAN("BOOLEAN"),
    DOUBLE("DOUBLE"),
    ERROR("ERROR"),
    INTEGER("INTEGER"),
    LONG("LONG"),
    NULL("NULL"),
    NUMBER("NUMBER"),
    STRING("STRING");

    private String value;

    ReturnTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ReturnTypeEnum fromValue(String text) {
      for (ReturnTypeEnum b : ReturnTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ReturnTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ReturnTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("returnType")
  private ReturnTypeEnum returnType = null;

  public FunctionSignature aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public FunctionSignature addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<String>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @Schema(description = "")
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }

  public FunctionSignature args(List<Arg> args) {
    this.args = args;
    return this;
  }

  public FunctionSignature addArgsItem(Arg argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<Arg>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @Schema(description = "")
  public List<Arg> getArgs() {
    return args;
  }

  public void setArgs(List<Arg> args) {
    this.args = args;
  }

  public FunctionSignature categoryPath(List<String> categoryPath) {
    this.categoryPath = categoryPath;
    return this;
  }

  public FunctionSignature addCategoryPathItem(String categoryPathItem) {
    if (this.categoryPath == null) {
      this.categoryPath = new ArrayList<String>();
    }
    this.categoryPath.add(categoryPathItem);
    return this;
  }

   /**
   * Get categoryPath
   * @return categoryPath
  **/
  @Schema(description = "")
  public List<String> getCategoryPath() {
    return categoryPath;
  }

  public void setCategoryPath(List<String> categoryPath) {
    this.categoryPath = categoryPath;
  }

  public FunctionSignature description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public FunctionSignature name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FunctionSignature returnDescription(String returnDescription) {
    this.returnDescription = returnDescription;
    return this;
  }

   /**
   * Get returnDescription
   * @return returnDescription
  **/
  @Schema(description = "")
  public String getReturnDescription() {
    return returnDescription;
  }

  public void setReturnDescription(String returnDescription) {
    this.returnDescription = returnDescription;
  }

  public FunctionSignature returnType(ReturnTypeEnum returnType) {
    this.returnType = returnType;
    return this;
  }

   /**
   * Get returnType
   * @return returnType
  **/
  @Schema(description = "")
  public ReturnTypeEnum getReturnType() {
    return returnType;
  }

  public void setReturnType(ReturnTypeEnum returnType) {
    this.returnType = returnType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionSignature functionSignature = (FunctionSignature) o;
    return Objects.equals(this.aliases, functionSignature.aliases) &&
        Objects.equals(this.args, functionSignature.args) &&
        Objects.equals(this.categoryPath, functionSignature.categoryPath) &&
        Objects.equals(this.description, functionSignature.description) &&
        Objects.equals(this.name, functionSignature.name) &&
        Objects.equals(this.returnDescription, functionSignature.returnDescription) &&
        Objects.equals(this.returnType, functionSignature.returnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, args, categoryPath, description, name, returnDescription, returnType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionSignature {\n");
    
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    categoryPath: ").append(toIndentedString(categoryPath)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    returnDescription: ").append(toIndentedString(returnDescription)).append("\n");
    sb.append("    returnType: ").append(toIndentedString(returnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
