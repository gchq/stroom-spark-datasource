/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ActivityConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ActivityConfig {
  @SerializedName("chooseOnStartup")
  private Boolean chooseOnStartup = null;

  @SerializedName("editorBody")
  private String editorBody = null;

  @SerializedName("editorTitle")
  private String editorTitle = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("managerTitle")
  private String managerTitle = null;

  public ActivityConfig chooseOnStartup(Boolean chooseOnStartup) {
    this.chooseOnStartup = chooseOnStartup;
    return this;
  }

   /**
   * Get chooseOnStartup
   * @return chooseOnStartup
  **/
  @Schema(description = "")
  public Boolean isChooseOnStartup() {
    return chooseOnStartup;
  }

  public void setChooseOnStartup(Boolean chooseOnStartup) {
    this.chooseOnStartup = chooseOnStartup;
  }

  public ActivityConfig editorBody(String editorBody) {
    this.editorBody = editorBody;
    return this;
  }

   /**
   * Get editorBody
   * @return editorBody
  **/
  @Schema(description = "")
  public String getEditorBody() {
    return editorBody;
  }

  public void setEditorBody(String editorBody) {
    this.editorBody = editorBody;
  }

  public ActivityConfig editorTitle(String editorTitle) {
    this.editorTitle = editorTitle;
    return this;
  }

   /**
   * Get editorTitle
   * @return editorTitle
  **/
  @Schema(description = "")
  public String getEditorTitle() {
    return editorTitle;
  }

  public void setEditorTitle(String editorTitle) {
    this.editorTitle = editorTitle;
  }

  public ActivityConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ActivityConfig managerTitle(String managerTitle) {
    this.managerTitle = managerTitle;
    return this;
  }

   /**
   * Get managerTitle
   * @return managerTitle
  **/
  @Schema(description = "")
  public String getManagerTitle() {
    return managerTitle;
  }

  public void setManagerTitle(String managerTitle) {
    this.managerTitle = managerTitle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityConfig activityConfig = (ActivityConfig) o;
    return Objects.equals(this.chooseOnStartup, activityConfig.chooseOnStartup) &&
        Objects.equals(this.editorBody, activityConfig.editorBody) &&
        Objects.equals(this.editorTitle, activityConfig.editorTitle) &&
        Objects.equals(this.enabled, activityConfig.enabled) &&
        Objects.equals(this.managerTitle, activityConfig.managerTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chooseOnStartup, editorBody, editorTitle, enabled, managerTitle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityConfig {\n");
    
    sb.append("    chooseOnStartup: ").append(toIndentedString(chooseOnStartup)).append("\n");
    sb.append("    editorBody: ").append(toIndentedString(editorBody)).append("\n");
    sb.append("    editorTitle: ").append(toIndentedString(editorTitle)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    managerTitle: ").append(toIndentedString(managerTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
