/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The timezone to apply to a date time value
 */
@Schema(description = "The timezone to apply to a date time value")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class TimeZone {
  @SerializedName("id")
  private String id = null;

  @SerializedName("offsetHours")
  private Integer offsetHours = null;

  @SerializedName("offsetMinutes")
  private Integer offsetMinutes = null;

  /**
   * How the time zone will be specified, e.g. from provided client &#x27;Local&#x27; time, &#x27;UTC&#x27;, a recognised timezone &#x27;Id&#x27; or an &#x27;Offset&#x27; from UTC in hours and minutes.
   */
  @JsonAdapter(UseEnum.Adapter.class)
  public enum UseEnum {
    LOCAL("Local"),
    UTC("UTC"),
    ID("Id"),
    OFFSET("Offset");

    private String value;

    UseEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UseEnum fromValue(String text) {
      for (UseEnum b : UseEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UseEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return UseEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("use")
  private UseEnum use = null;

  public TimeZone id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the time zone, conforming to java.time.ZoneId
   * @return id
  **/
  @Schema(example = "GMT", description = "The id of the time zone, conforming to java.time.ZoneId")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TimeZone offsetHours(Integer offsetHours) {
    this.offsetHours = offsetHours;
    return this;
  }

   /**
   * The number of hours this timezone is offset from UTC
   * @return offsetHours
  **/
  @Schema(example = "-1", description = "The number of hours this timezone is offset from UTC")
  public Integer getOffsetHours() {
    return offsetHours;
  }

  public void setOffsetHours(Integer offsetHours) {
    this.offsetHours = offsetHours;
  }

  public TimeZone offsetMinutes(Integer offsetMinutes) {
    this.offsetMinutes = offsetMinutes;
    return this;
  }

   /**
   * The number of minutes this timezone is offset from UTC
   * @return offsetMinutes
  **/
  @Schema(example = "-30", description = "The number of minutes this timezone is offset from UTC")
  public Integer getOffsetMinutes() {
    return offsetMinutes;
  }

  public void setOffsetMinutes(Integer offsetMinutes) {
    this.offsetMinutes = offsetMinutes;
  }

  public TimeZone use(UseEnum use) {
    this.use = use;
    return this;
  }

   /**
   * How the time zone will be specified, e.g. from provided client &#x27;Local&#x27; time, &#x27;UTC&#x27;, a recognised timezone &#x27;Id&#x27; or an &#x27;Offset&#x27; from UTC in hours and minutes.
   * @return use
  **/
  @Schema(required = true, description = "How the time zone will be specified, e.g. from provided client 'Local' time, 'UTC', a recognised timezone 'Id' or an 'Offset' from UTC in hours and minutes.")
  public UseEnum getUse() {
    return use;
  }

  public void setUse(UseEnum use) {
    this.use = use;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeZone timeZone = (TimeZone) o;
    return Objects.equals(this.id, timeZone.id) &&
        Objects.equals(this.offsetHours, timeZone.offsetHours) &&
        Objects.equals(this.offsetMinutes, timeZone.offsetMinutes) &&
        Objects.equals(this.use, timeZone.use);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, offsetHours, offsetMinutes, use);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeZone {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offsetHours: ").append(toIndentedString(offsetHours)).append("\n");
    sb.append("    offsetMinutes: ").append(toIndentedString(offsetMinutes)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
