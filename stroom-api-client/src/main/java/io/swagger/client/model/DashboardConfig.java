/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ComponentConfig;
import io.swagger.client.model.LayoutConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DashboardConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class DashboardConfig {
  @SerializedName("components")
  private List<ComponentConfig> components = null;

  @SerializedName("layout")
  private LayoutConfig layout = null;

  @SerializedName("parameters")
  private String parameters = null;

  /**
   * Gets or Sets tabVisibility
   */
  @JsonAdapter(TabVisibilityEnum.Adapter.class)
  public enum TabVisibilityEnum {
    SHOW_ALL("SHOW_ALL"),
    HIDE_SINGLE("HIDE_SINGLE"),
    HIDE_ALL("HIDE_ALL");

    private String value;

    TabVisibilityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TabVisibilityEnum fromValue(String text) {
      for (TabVisibilityEnum b : TabVisibilityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TabVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TabVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TabVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TabVisibilityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tabVisibility")
  private TabVisibilityEnum tabVisibility = null;

  public DashboardConfig components(List<ComponentConfig> components) {
    this.components = components;
    return this;
  }

  public DashboardConfig addComponentsItem(ComponentConfig componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<ComponentConfig>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Get components
   * @return components
  **/
  @Schema(description = "")
  public List<ComponentConfig> getComponents() {
    return components;
  }

  public void setComponents(List<ComponentConfig> components) {
    this.components = components;
  }

  public DashboardConfig layout(LayoutConfig layout) {
    this.layout = layout;
    return this;
  }

   /**
   * Get layout
   * @return layout
  **/
  @Schema(description = "")
  public LayoutConfig getLayout() {
    return layout;
  }

  public void setLayout(LayoutConfig layout) {
    this.layout = layout;
  }

  public DashboardConfig parameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @Schema(description = "")
  public String getParameters() {
    return parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }

  public DashboardConfig tabVisibility(TabVisibilityEnum tabVisibility) {
    this.tabVisibility = tabVisibility;
    return this;
  }

   /**
   * Get tabVisibility
   * @return tabVisibility
  **/
  @Schema(description = "")
  public TabVisibilityEnum getTabVisibility() {
    return tabVisibility;
  }

  public void setTabVisibility(TabVisibilityEnum tabVisibility) {
    this.tabVisibility = tabVisibility;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardConfig dashboardConfig = (DashboardConfig) o;
    return Objects.equals(this.components, dashboardConfig.components) &&
        Objects.equals(this.layout, dashboardConfig.layout) &&
        Objects.equals(this.parameters, dashboardConfig.parameters) &&
        Objects.equals(this.tabVisibility, dashboardConfig.tabVisibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(components, layout, parameters, tabVisibility);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardConfig {\n");
    
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    tabVisibility: ").append(toIndentedString(tabVisibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
