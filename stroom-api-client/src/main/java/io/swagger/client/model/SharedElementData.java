/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Indicators;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SharedElementData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class SharedElementData {
  @SerializedName("codeIndicators")
  private Indicators codeIndicators = null;

  @SerializedName("formatInput")
  private Boolean formatInput = null;

  @SerializedName("formatOutput")
  private Boolean formatOutput = null;

  @SerializedName("input")
  private String input = null;

  @SerializedName("output")
  private String output = null;

  @SerializedName("outputIndicators")
  private Indicators outputIndicators = null;

  public SharedElementData codeIndicators(Indicators codeIndicators) {
    this.codeIndicators = codeIndicators;
    return this;
  }

   /**
   * Get codeIndicators
   * @return codeIndicators
  **/
  @Schema(description = "")
  public Indicators getCodeIndicators() {
    return codeIndicators;
  }

  public void setCodeIndicators(Indicators codeIndicators) {
    this.codeIndicators = codeIndicators;
  }

  public SharedElementData formatInput(Boolean formatInput) {
    this.formatInput = formatInput;
    return this;
  }

   /**
   * Get formatInput
   * @return formatInput
  **/
  @Schema(description = "")
  public Boolean isFormatInput() {
    return formatInput;
  }

  public void setFormatInput(Boolean formatInput) {
    this.formatInput = formatInput;
  }

  public SharedElementData formatOutput(Boolean formatOutput) {
    this.formatOutput = formatOutput;
    return this;
  }

   /**
   * Get formatOutput
   * @return formatOutput
  **/
  @Schema(description = "")
  public Boolean isFormatOutput() {
    return formatOutput;
  }

  public void setFormatOutput(Boolean formatOutput) {
    this.formatOutput = formatOutput;
  }

  public SharedElementData input(String input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @Schema(description = "")
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }

  public SharedElementData output(String output) {
    this.output = output;
    return this;
  }

   /**
   * Get output
   * @return output
  **/
  @Schema(description = "")
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }

  public SharedElementData outputIndicators(Indicators outputIndicators) {
    this.outputIndicators = outputIndicators;
    return this;
  }

   /**
   * Get outputIndicators
   * @return outputIndicators
  **/
  @Schema(description = "")
  public Indicators getOutputIndicators() {
    return outputIndicators;
  }

  public void setOutputIndicators(Indicators outputIndicators) {
    this.outputIndicators = outputIndicators;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedElementData sharedElementData = (SharedElementData) o;
    return Objects.equals(this.codeIndicators, sharedElementData.codeIndicators) &&
        Objects.equals(this.formatInput, sharedElementData.formatInput) &&
        Objects.equals(this.formatOutput, sharedElementData.formatOutput) &&
        Objects.equals(this.input, sharedElementData.input) &&
        Objects.equals(this.output, sharedElementData.output) &&
        Objects.equals(this.outputIndicators, sharedElementData.outputIndicators);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeIndicators, formatInput, formatOutput, input, output, outputIndicators);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedElementData {\n");
    
    sb.append("    codeIndicators: ").append(toIndentedString(codeIndicators)).append("\n");
    sb.append("    formatInput: ").append(toIndentedString(formatInput)).append("\n");
    sb.append("    formatOutput: ").append(toIndentedString(formatOutput)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputIndicators: ").append(toIndentedString(outputIndicators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
