/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PipelineElement;
import io.swagger.client.model.PipelineProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FindElementDocRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FindElementDocRequest {
  @SerializedName("feedName")
  private String feedName = null;

  @SerializedName("pipelineElement")
  private PipelineElement pipelineElement = null;

  @SerializedName("pipelineName")
  private String pipelineName = null;

  @SerializedName("properties")
  private List<PipelineProperty> properties = null;

  public FindElementDocRequest feedName(String feedName) {
    this.feedName = feedName;
    return this;
  }

   /**
   * Get feedName
   * @return feedName
  **/
  @Schema(description = "")
  public String getFeedName() {
    return feedName;
  }

  public void setFeedName(String feedName) {
    this.feedName = feedName;
  }

  public FindElementDocRequest pipelineElement(PipelineElement pipelineElement) {
    this.pipelineElement = pipelineElement;
    return this;
  }

   /**
   * Get pipelineElement
   * @return pipelineElement
  **/
  @Schema(description = "")
  public PipelineElement getPipelineElement() {
    return pipelineElement;
  }

  public void setPipelineElement(PipelineElement pipelineElement) {
    this.pipelineElement = pipelineElement;
  }

  public FindElementDocRequest pipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
    return this;
  }

   /**
   * Get pipelineName
   * @return pipelineName
  **/
  @Schema(description = "")
  public String getPipelineName() {
    return pipelineName;
  }

  public void setPipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
  }

  public FindElementDocRequest properties(List<PipelineProperty> properties) {
    this.properties = properties;
    return this;
  }

  public FindElementDocRequest addPropertiesItem(PipelineProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<PipelineProperty>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public List<PipelineProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<PipelineProperty> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindElementDocRequest findElementDocRequest = (FindElementDocRequest) o;
    return Objects.equals(this.feedName, findElementDocRequest.feedName) &&
        Objects.equals(this.pipelineElement, findElementDocRequest.pipelineElement) &&
        Objects.equals(this.pipelineName, findElementDocRequest.pipelineName) &&
        Objects.equals(this.properties, findElementDocRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedName, pipelineElement, pipelineName, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindElementDocRequest {\n");
    
    sb.append("    feedName: ").append(toIndentedString(feedName)).append("\n");
    sb.append("    pipelineElement: ").append(toIndentedString(pipelineElement)).append("\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
