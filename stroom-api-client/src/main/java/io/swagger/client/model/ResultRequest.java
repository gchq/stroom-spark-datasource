/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OffsetRange;
import io.swagger.client.model.TableSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A definition for how to return the raw results of the query in the SearchResponse, e.g. sorted, grouped, limited, etc.
 */
@Schema(description = "A definition for how to return the raw results of the query in the SearchResponse, e.g. sorted, grouped, limited, etc.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ResultRequest {
  @SerializedName("componentId")
  private String componentId = null;

  /**
   * Gets or Sets fetch
   */
  @JsonAdapter(FetchEnum.Adapter.class)
  public enum FetchEnum {
    NONE("NONE"),
    CHANGES("CHANGES"),
    ALL("ALL");

    private String value;

    FetchEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FetchEnum fromValue(String text) {
      for (FetchEnum b : FetchEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FetchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FetchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FetchEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FetchEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("fetch")
  private FetchEnum fetch = null;

  @SerializedName("mappings")
  private List<TableSettings> mappings = new ArrayList<TableSettings>();

  @SerializedName("openGroups")
  private List<String> openGroups = new ArrayList<String>();

  @SerializedName("requestedRange")
  private OffsetRange requestedRange = null;

  /**
   * The style of results required. FLAT will provide a FlatResult object, while TABLE will provide a TableResult object
   */
  @JsonAdapter(ResultStyleEnum.Adapter.class)
  public enum ResultStyleEnum {
    FLAT("FLAT"),
    TABLE("TABLE");

    private String value;

    ResultStyleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResultStyleEnum fromValue(String text) {
      for (ResultStyleEnum b : ResultStyleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResultStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultStyleEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResultStyleEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resultStyle")
  private ResultStyleEnum resultStyle = null;

  public ResultRequest componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * The ID of the component that will receive the results corresponding to this ResultRequest
   * @return componentId
  **/
  @Schema(required = true, description = "The ID of the component that will receive the results corresponding to this ResultRequest")
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }

  public ResultRequest fetch(FetchEnum fetch) {
    this.fetch = fetch;
    return this;
  }

   /**
   * Get fetch
   * @return fetch
  **/
  @Schema(description = "")
  public FetchEnum getFetch() {
    return fetch;
  }

  public void setFetch(FetchEnum fetch) {
    this.fetch = fetch;
  }

  public ResultRequest mappings(List<TableSettings> mappings) {
    this.mappings = mappings;
    return this;
  }

  public ResultRequest addMappingsItem(TableSettings mappingsItem) {
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * Get mappings
   * @return mappings
  **/
  @Schema(required = true, description = "")
  public List<TableSettings> getMappings() {
    return mappings;
  }

  public void setMappings(List<TableSettings> mappings) {
    this.mappings = mappings;
  }

  public ResultRequest openGroups(List<String> openGroups) {
    this.openGroups = openGroups;
    return this;
  }

  public ResultRequest addOpenGroupsItem(String openGroupsItem) {
    this.openGroups.add(openGroupsItem);
    return this;
  }

   /**
   * TODO
   * @return openGroups
  **/
  @Schema(required = true, description = "TODO")
  public List<String> getOpenGroups() {
    return openGroups;
  }

  public void setOpenGroups(List<String> openGroups) {
    this.openGroups = openGroups;
  }

  public ResultRequest requestedRange(OffsetRange requestedRange) {
    this.requestedRange = requestedRange;
    return this;
  }

   /**
   * Get requestedRange
   * @return requestedRange
  **/
  @Schema(required = true, description = "")
  public OffsetRange getRequestedRange() {
    return requestedRange;
  }

  public void setRequestedRange(OffsetRange requestedRange) {
    this.requestedRange = requestedRange;
  }

  public ResultRequest resultStyle(ResultStyleEnum resultStyle) {
    this.resultStyle = resultStyle;
    return this;
  }

   /**
   * The style of results required. FLAT will provide a FlatResult object, while TABLE will provide a TableResult object
   * @return resultStyle
  **/
  @Schema(required = true, description = "The style of results required. FLAT will provide a FlatResult object, while TABLE will provide a TableResult object")
  public ResultStyleEnum getResultStyle() {
    return resultStyle;
  }

  public void setResultStyle(ResultStyleEnum resultStyle) {
    this.resultStyle = resultStyle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultRequest resultRequest = (ResultRequest) o;
    return Objects.equals(this.componentId, resultRequest.componentId) &&
        Objects.equals(this.fetch, resultRequest.fetch) &&
        Objects.equals(this.mappings, resultRequest.mappings) &&
        Objects.equals(this.openGroups, resultRequest.openGroups) &&
        Objects.equals(this.requestedRange, resultRequest.requestedRange) &&
        Objects.equals(this.resultStyle, resultRequest.resultStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentId, fetch, mappings, openGroups, requestedRange, resultStyle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultRequest {\n");
    
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    fetch: ").append(toIndentedString(fetch)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    openGroups: ").append(toIndentedString(openGroups)).append("\n");
    sb.append("    requestedRange: ").append(toIndentedString(requestedRange)).append("\n");
    sb.append("    resultStyle: ").append(toIndentedString(resultStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
