/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExplorerNode;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FetchExplorerNodeResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FetchExplorerNodeResult {
  @SerializedName("openedItems")
  private List<String> openedItems = null;

  @SerializedName("rootNodes")
  private List<ExplorerNode> rootNodes = null;

  @SerializedName("temporaryOpenedItems")
  private List<String> temporaryOpenedItems = null;

  public FetchExplorerNodeResult openedItems(List<String> openedItems) {
    this.openedItems = openedItems;
    return this;
  }

  public FetchExplorerNodeResult addOpenedItemsItem(String openedItemsItem) {
    if (this.openedItems == null) {
      this.openedItems = new ArrayList<String>();
    }
    this.openedItems.add(openedItemsItem);
    return this;
  }

   /**
   * Get openedItems
   * @return openedItems
  **/
  @Schema(description = "")
  public List<String> getOpenedItems() {
    return openedItems;
  }

  public void setOpenedItems(List<String> openedItems) {
    this.openedItems = openedItems;
  }

  public FetchExplorerNodeResult rootNodes(List<ExplorerNode> rootNodes) {
    this.rootNodes = rootNodes;
    return this;
  }

  public FetchExplorerNodeResult addRootNodesItem(ExplorerNode rootNodesItem) {
    if (this.rootNodes == null) {
      this.rootNodes = new ArrayList<ExplorerNode>();
    }
    this.rootNodes.add(rootNodesItem);
    return this;
  }

   /**
   * Get rootNodes
   * @return rootNodes
  **/
  @Schema(description = "")
  public List<ExplorerNode> getRootNodes() {
    return rootNodes;
  }

  public void setRootNodes(List<ExplorerNode> rootNodes) {
    this.rootNodes = rootNodes;
  }

  public FetchExplorerNodeResult temporaryOpenedItems(List<String> temporaryOpenedItems) {
    this.temporaryOpenedItems = temporaryOpenedItems;
    return this;
  }

  public FetchExplorerNodeResult addTemporaryOpenedItemsItem(String temporaryOpenedItemsItem) {
    if (this.temporaryOpenedItems == null) {
      this.temporaryOpenedItems = new ArrayList<String>();
    }
    this.temporaryOpenedItems.add(temporaryOpenedItemsItem);
    return this;
  }

   /**
   * Get temporaryOpenedItems
   * @return temporaryOpenedItems
  **/
  @Schema(description = "")
  public List<String> getTemporaryOpenedItems() {
    return temporaryOpenedItems;
  }

  public void setTemporaryOpenedItems(List<String> temporaryOpenedItems) {
    this.temporaryOpenedItems = temporaryOpenedItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchExplorerNodeResult fetchExplorerNodeResult = (FetchExplorerNodeResult) o;
    return Objects.equals(this.openedItems, fetchExplorerNodeResult.openedItems) &&
        Objects.equals(this.rootNodes, fetchExplorerNodeResult.rootNodes) &&
        Objects.equals(this.temporaryOpenedItems, fetchExplorerNodeResult.temporaryOpenedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openedItems, rootNodes, temporaryOpenedItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchExplorerNodeResult {\n");
    
    sb.append("    openedItems: ").append(toIndentedString(openedItems)).append("\n");
    sb.append("    rootNodes: ").append(toIndentedString(rootNodes)).append("\n");
    sb.append("    temporaryOpenedItems: ").append(toIndentedString(temporaryOpenedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
