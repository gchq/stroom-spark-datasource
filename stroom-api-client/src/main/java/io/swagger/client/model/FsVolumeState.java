/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FsVolumeState
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FsVolumeState {
  @SerializedName("bytesFree")
  private Long bytesFree = null;

  @SerializedName("bytesTotal")
  private Long bytesTotal = null;

  @SerializedName("bytesUsed")
  private Long bytesUsed = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("updateTimeMs")
  private Long updateTimeMs = null;

  @SerializedName("version")
  private Integer version = null;

  public FsVolumeState bytesFree(Long bytesFree) {
    this.bytesFree = bytesFree;
    return this;
  }

   /**
   * Get bytesFree
   * @return bytesFree
  **/
  @Schema(description = "")
  public Long getBytesFree() {
    return bytesFree;
  }

  public void setBytesFree(Long bytesFree) {
    this.bytesFree = bytesFree;
  }

  public FsVolumeState bytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
    return this;
  }

   /**
   * Get bytesTotal
   * @return bytesTotal
  **/
  @Schema(description = "")
  public Long getBytesTotal() {
    return bytesTotal;
  }

  public void setBytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
  }

  public FsVolumeState bytesUsed(Long bytesUsed) {
    this.bytesUsed = bytesUsed;
    return this;
  }

   /**
   * Get bytesUsed
   * @return bytesUsed
  **/
  @Schema(description = "")
  public Long getBytesUsed() {
    return bytesUsed;
  }

  public void setBytesUsed(Long bytesUsed) {
    this.bytesUsed = bytesUsed;
  }

  public FsVolumeState id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public FsVolumeState updateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
    return this;
  }

   /**
   * Get updateTimeMs
   * @return updateTimeMs
  **/
  @Schema(description = "")
  public Long getUpdateTimeMs() {
    return updateTimeMs;
  }

  public void setUpdateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
  }

  public FsVolumeState version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FsVolumeState fsVolumeState = (FsVolumeState) o;
    return Objects.equals(this.bytesFree, fsVolumeState.bytesFree) &&
        Objects.equals(this.bytesTotal, fsVolumeState.bytesTotal) &&
        Objects.equals(this.bytesUsed, fsVolumeState.bytesUsed) &&
        Objects.equals(this.id, fsVolumeState.id) &&
        Objects.equals(this.updateTimeMs, fsVolumeState.updateTimeMs) &&
        Objects.equals(this.version, fsVolumeState.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesFree, bytesTotal, bytesUsed, id, updateTimeMs, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FsVolumeState {\n");
    
    sb.append("    bytesFree: ").append(toIndentedString(bytesFree)).append("\n");
    sb.append("    bytesTotal: ").append(toIndentedString(bytesTotal)).append("\n");
    sb.append("    bytesUsed: ").append(toIndentedString(bytesUsed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updateTimeMs: ").append(toIndentedString(updateTimeMs)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
