/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ReferenceLoader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RefDataLookupRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class RefDataLookupRequest {
  @SerializedName("effectiveTime")
  private String effectiveTime = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("mapName")
  private String mapName = null;

  @SerializedName("referenceLoaders")
  private List<ReferenceLoader> referenceLoaders = new ArrayList<ReferenceLoader>();

  public RefDataLookupRequest effectiveTime(String effectiveTime) {
    this.effectiveTime = effectiveTime;
    return this;
  }

   /**
   * Get effectiveTime
   * @return effectiveTime
  **/
  @Schema(description = "")
  public String getEffectiveTime() {
    return effectiveTime;
  }

  public void setEffectiveTime(String effectiveTime) {
    this.effectiveTime = effectiveTime;
  }

  public RefDataLookupRequest key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @Schema(required = true, description = "")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public RefDataLookupRequest mapName(String mapName) {
    this.mapName = mapName;
    return this;
  }

   /**
   * Get mapName
   * @return mapName
  **/
  @Schema(required = true, description = "")
  public String getMapName() {
    return mapName;
  }

  public void setMapName(String mapName) {
    this.mapName = mapName;
  }

  public RefDataLookupRequest referenceLoaders(List<ReferenceLoader> referenceLoaders) {
    this.referenceLoaders = referenceLoaders;
    return this;
  }

  public RefDataLookupRequest addReferenceLoadersItem(ReferenceLoader referenceLoadersItem) {
    this.referenceLoaders.add(referenceLoadersItem);
    return this;
  }

   /**
   * Get referenceLoaders
   * @return referenceLoaders
  **/
  @Schema(required = true, description = "")
  public List<ReferenceLoader> getReferenceLoaders() {
    return referenceLoaders;
  }

  public void setReferenceLoaders(List<ReferenceLoader> referenceLoaders) {
    this.referenceLoaders = referenceLoaders;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefDataLookupRequest refDataLookupRequest = (RefDataLookupRequest) o;
    return Objects.equals(this.effectiveTime, refDataLookupRequest.effectiveTime) &&
        Objects.equals(this.key, refDataLookupRequest.key) &&
        Objects.equals(this.mapName, refDataLookupRequest.mapName) &&
        Objects.equals(this.referenceLoaders, refDataLookupRequest.referenceLoaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveTime, key, mapName, referenceLoaders);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefDataLookupRequest {\n");
    
    sb.append("    effectiveTime: ").append(toIndentedString(effectiveTime)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    mapName: ").append(toIndentedString(mapName)).append("\n");
    sb.append("    referenceLoaders: ").append(toIndentedString(referenceLoaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
