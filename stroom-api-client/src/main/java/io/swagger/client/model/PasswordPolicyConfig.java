/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PasswordPolicyConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class PasswordPolicyConfig {
  @SerializedName("allowPasswordResets")
  private Boolean allowPasswordResets = null;

  @SerializedName("forcePasswordChangeOnFirstLogin")
  private Boolean forcePasswordChangeOnFirstLogin = null;

  @SerializedName("mandatoryPasswordChangeDuration")
  private String mandatoryPasswordChangeDuration = null;

  @SerializedName("minimumPasswordLength")
  private Integer minimumPasswordLength = null;

  @SerializedName("minimumPasswordStrength")
  private Integer minimumPasswordStrength = null;

  @SerializedName("neverUsedAccountDeactivationThreshold")
  private String neverUsedAccountDeactivationThreshold = null;

  @SerializedName("passwordComplexityRegex")
  private String passwordComplexityRegex = null;

  @SerializedName("passwordPolicyMessage")
  private String passwordPolicyMessage = null;

  @SerializedName("unusedAccountDeactivationThreshold")
  private String unusedAccountDeactivationThreshold = null;

  public PasswordPolicyConfig allowPasswordResets(Boolean allowPasswordResets) {
    this.allowPasswordResets = allowPasswordResets;
    return this;
  }

   /**
   * Get allowPasswordResets
   * @return allowPasswordResets
  **/
  @Schema(description = "")
  public Boolean isAllowPasswordResets() {
    return allowPasswordResets;
  }

  public void setAllowPasswordResets(Boolean allowPasswordResets) {
    this.allowPasswordResets = allowPasswordResets;
  }

  public PasswordPolicyConfig forcePasswordChangeOnFirstLogin(Boolean forcePasswordChangeOnFirstLogin) {
    this.forcePasswordChangeOnFirstLogin = forcePasswordChangeOnFirstLogin;
    return this;
  }

   /**
   * Get forcePasswordChangeOnFirstLogin
   * @return forcePasswordChangeOnFirstLogin
  **/
  @Schema(description = "")
  public Boolean isForcePasswordChangeOnFirstLogin() {
    return forcePasswordChangeOnFirstLogin;
  }

  public void setForcePasswordChangeOnFirstLogin(Boolean forcePasswordChangeOnFirstLogin) {
    this.forcePasswordChangeOnFirstLogin = forcePasswordChangeOnFirstLogin;
  }

  public PasswordPolicyConfig mandatoryPasswordChangeDuration(String mandatoryPasswordChangeDuration) {
    this.mandatoryPasswordChangeDuration = mandatoryPasswordChangeDuration;
    return this;
  }

   /**
   * Get mandatoryPasswordChangeDuration
   * @return mandatoryPasswordChangeDuration
  **/
  @Schema(required = true, description = "")
  public String getMandatoryPasswordChangeDuration() {
    return mandatoryPasswordChangeDuration;
  }

  public void setMandatoryPasswordChangeDuration(String mandatoryPasswordChangeDuration) {
    this.mandatoryPasswordChangeDuration = mandatoryPasswordChangeDuration;
  }

  public PasswordPolicyConfig minimumPasswordLength(Integer minimumPasswordLength) {
    this.minimumPasswordLength = minimumPasswordLength;
    return this;
  }

   /**
   * Get minimumPasswordLength
   * minimum: 0
   * @return minimumPasswordLength
  **/
  @Schema(required = true, description = "")
  public Integer getMinimumPasswordLength() {
    return minimumPasswordLength;
  }

  public void setMinimumPasswordLength(Integer minimumPasswordLength) {
    this.minimumPasswordLength = minimumPasswordLength;
  }

  public PasswordPolicyConfig minimumPasswordStrength(Integer minimumPasswordStrength) {
    this.minimumPasswordStrength = minimumPasswordStrength;
    return this;
  }

   /**
   * Get minimumPasswordStrength
   * minimum: 0
   * maximum: 5
   * @return minimumPasswordStrength
  **/
  @Schema(required = true, description = "")
  public Integer getMinimumPasswordStrength() {
    return minimumPasswordStrength;
  }

  public void setMinimumPasswordStrength(Integer minimumPasswordStrength) {
    this.minimumPasswordStrength = minimumPasswordStrength;
  }

  public PasswordPolicyConfig neverUsedAccountDeactivationThreshold(String neverUsedAccountDeactivationThreshold) {
    this.neverUsedAccountDeactivationThreshold = neverUsedAccountDeactivationThreshold;
    return this;
  }

   /**
   * Get neverUsedAccountDeactivationThreshold
   * @return neverUsedAccountDeactivationThreshold
  **/
  @Schema(required = true, description = "")
  public String getNeverUsedAccountDeactivationThreshold() {
    return neverUsedAccountDeactivationThreshold;
  }

  public void setNeverUsedAccountDeactivationThreshold(String neverUsedAccountDeactivationThreshold) {
    this.neverUsedAccountDeactivationThreshold = neverUsedAccountDeactivationThreshold;
  }

  public PasswordPolicyConfig passwordComplexityRegex(String passwordComplexityRegex) {
    this.passwordComplexityRegex = passwordComplexityRegex;
    return this;
  }

   /**
   * Get passwordComplexityRegex
   * @return passwordComplexityRegex
  **/
  @Schema(description = "")
  public String getPasswordComplexityRegex() {
    return passwordComplexityRegex;
  }

  public void setPasswordComplexityRegex(String passwordComplexityRegex) {
    this.passwordComplexityRegex = passwordComplexityRegex;
  }

  public PasswordPolicyConfig passwordPolicyMessage(String passwordPolicyMessage) {
    this.passwordPolicyMessage = passwordPolicyMessage;
    return this;
  }

   /**
   * Get passwordPolicyMessage
   * @return passwordPolicyMessage
  **/
  @Schema(description = "")
  public String getPasswordPolicyMessage() {
    return passwordPolicyMessage;
  }

  public void setPasswordPolicyMessage(String passwordPolicyMessage) {
    this.passwordPolicyMessage = passwordPolicyMessage;
  }

  public PasswordPolicyConfig unusedAccountDeactivationThreshold(String unusedAccountDeactivationThreshold) {
    this.unusedAccountDeactivationThreshold = unusedAccountDeactivationThreshold;
    return this;
  }

   /**
   * Get unusedAccountDeactivationThreshold
   * @return unusedAccountDeactivationThreshold
  **/
  @Schema(required = true, description = "")
  public String getUnusedAccountDeactivationThreshold() {
    return unusedAccountDeactivationThreshold;
  }

  public void setUnusedAccountDeactivationThreshold(String unusedAccountDeactivationThreshold) {
    this.unusedAccountDeactivationThreshold = unusedAccountDeactivationThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyConfig passwordPolicyConfig = (PasswordPolicyConfig) o;
    return Objects.equals(this.allowPasswordResets, passwordPolicyConfig.allowPasswordResets) &&
        Objects.equals(this.forcePasswordChangeOnFirstLogin, passwordPolicyConfig.forcePasswordChangeOnFirstLogin) &&
        Objects.equals(this.mandatoryPasswordChangeDuration, passwordPolicyConfig.mandatoryPasswordChangeDuration) &&
        Objects.equals(this.minimumPasswordLength, passwordPolicyConfig.minimumPasswordLength) &&
        Objects.equals(this.minimumPasswordStrength, passwordPolicyConfig.minimumPasswordStrength) &&
        Objects.equals(this.neverUsedAccountDeactivationThreshold, passwordPolicyConfig.neverUsedAccountDeactivationThreshold) &&
        Objects.equals(this.passwordComplexityRegex, passwordPolicyConfig.passwordComplexityRegex) &&
        Objects.equals(this.passwordPolicyMessage, passwordPolicyConfig.passwordPolicyMessage) &&
        Objects.equals(this.unusedAccountDeactivationThreshold, passwordPolicyConfig.unusedAccountDeactivationThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowPasswordResets, forcePasswordChangeOnFirstLogin, mandatoryPasswordChangeDuration, minimumPasswordLength, minimumPasswordStrength, neverUsedAccountDeactivationThreshold, passwordComplexityRegex, passwordPolicyMessage, unusedAccountDeactivationThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyConfig {\n");
    
    sb.append("    allowPasswordResets: ").append(toIndentedString(allowPasswordResets)).append("\n");
    sb.append("    forcePasswordChangeOnFirstLogin: ").append(toIndentedString(forcePasswordChangeOnFirstLogin)).append("\n");
    sb.append("    mandatoryPasswordChangeDuration: ").append(toIndentedString(mandatoryPasswordChangeDuration)).append("\n");
    sb.append("    minimumPasswordLength: ").append(toIndentedString(minimumPasswordLength)).append("\n");
    sb.append("    minimumPasswordStrength: ").append(toIndentedString(minimumPasswordStrength)).append("\n");
    sb.append("    neverUsedAccountDeactivationThreshold: ").append(toIndentedString(neverUsedAccountDeactivationThreshold)).append("\n");
    sb.append("    passwordComplexityRegex: ").append(toIndentedString(passwordComplexityRegex)).append("\n");
    sb.append("    passwordPolicyMessage: ").append(toIndentedString(passwordPolicyMessage)).append("\n");
    sb.append("    unusedAccountDeactivationThreshold: ").append(toIndentedString(unusedAccountDeactivationThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
