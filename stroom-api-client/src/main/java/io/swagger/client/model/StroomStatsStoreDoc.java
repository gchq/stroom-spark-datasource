/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.StroomStatsStoreEntityData;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * StroomStatsStoreDoc
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class StroomStatsStoreDoc {
  @SerializedName("config")
  private StroomStatsStoreEntityData config = null;

  @SerializedName("createTime")
  private Long createTime = null;

  @SerializedName("createTimeMs")
  private Long createTimeMs = null;

  @SerializedName("createUser")
  private String createUser = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets precision
   */
  @JsonAdapter(PrecisionEnum.Adapter.class)
  public enum PrecisionEnum {
    SECOND("SECOND"),
    MINUTE("MINUTE"),
    HOUR("HOUR"),
    DAY("DAY"),
    FOREVER("FOREVER");

    private String value;

    PrecisionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrecisionEnum fromValue(String text) {
      for (PrecisionEnum b : PrecisionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrecisionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PrecisionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("precision")
  private PrecisionEnum precision = null;

  /**
   * Gets or Sets rollUpType
   */
  @JsonAdapter(RollUpTypeEnum.Adapter.class)
  public enum RollUpTypeEnum {
    NONE("NONE"),
    ALL("ALL"),
    CUSTOM("CUSTOM");

    private String value;

    RollUpTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RollUpTypeEnum fromValue(String text) {
      for (RollUpTypeEnum b : RollUpTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RollUpTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RollUpTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RollUpTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RollUpTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("rollUpType")
  private RollUpTypeEnum rollUpType = null;

  /**
   * Gets or Sets statisticType
   */
  @JsonAdapter(StatisticTypeEnum.Adapter.class)
  public enum StatisticTypeEnum {
    COUNT("COUNT"),
    VALUE("VALUE");

    private String value;

    StatisticTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatisticTypeEnum fromValue(String text) {
      for (StatisticTypeEnum b : StatisticTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatisticTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatisticTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatisticTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatisticTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("statisticType")
  private StatisticTypeEnum statisticType = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("updateTime")
  private Long updateTime = null;

  @SerializedName("updateTimeMs")
  private Long updateTimeMs = null;

  @SerializedName("updateUser")
  private String updateUser = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("version")
  private String version = null;

  public StroomStatsStoreDoc config(StroomStatsStoreEntityData config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @Schema(description = "")
  public StroomStatsStoreEntityData getConfig() {
    return config;
  }

  public void setConfig(StroomStatsStoreEntityData config) {
    this.config = config;
  }

  public StroomStatsStoreDoc createTime(Long createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Long getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }

  public StroomStatsStoreDoc createTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
    return this;
  }

   /**
   * Get createTimeMs
   * @return createTimeMs
  **/
  @Schema(description = "")
  public Long getCreateTimeMs() {
    return createTimeMs;
  }

  public void setCreateTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
  }

  public StroomStatsStoreDoc createUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

   /**
   * Get createUser
   * @return createUser
  **/
  @Schema(description = "")
  public String getCreateUser() {
    return createUser;
  }

  public void setCreateUser(String createUser) {
    this.createUser = createUser;
  }

  public StroomStatsStoreDoc description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StroomStatsStoreDoc enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public StroomStatsStoreDoc name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StroomStatsStoreDoc precision(PrecisionEnum precision) {
    this.precision = precision;
    return this;
  }

   /**
   * Get precision
   * @return precision
  **/
  @Schema(description = "")
  public PrecisionEnum getPrecision() {
    return precision;
  }

  public void setPrecision(PrecisionEnum precision) {
    this.precision = precision;
  }

  public StroomStatsStoreDoc rollUpType(RollUpTypeEnum rollUpType) {
    this.rollUpType = rollUpType;
    return this;
  }

   /**
   * Get rollUpType
   * @return rollUpType
  **/
  @Schema(description = "")
  public RollUpTypeEnum getRollUpType() {
    return rollUpType;
  }

  public void setRollUpType(RollUpTypeEnum rollUpType) {
    this.rollUpType = rollUpType;
  }

  public StroomStatsStoreDoc statisticType(StatisticTypeEnum statisticType) {
    this.statisticType = statisticType;
    return this;
  }

   /**
   * Get statisticType
   * @return statisticType
  **/
  @Schema(description = "")
  public StatisticTypeEnum getStatisticType() {
    return statisticType;
  }

  public void setStatisticType(StatisticTypeEnum statisticType) {
    this.statisticType = statisticType;
  }

  public StroomStatsStoreDoc type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public StroomStatsStoreDoc updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }

  public StroomStatsStoreDoc updateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
    return this;
  }

   /**
   * Get updateTimeMs
   * @return updateTimeMs
  **/
  @Schema(description = "")
  public Long getUpdateTimeMs() {
    return updateTimeMs;
  }

  public void setUpdateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
  }

  public StroomStatsStoreDoc updateUser(String updateUser) {
    this.updateUser = updateUser;
    return this;
  }

   /**
   * Get updateUser
   * @return updateUser
  **/
  @Schema(description = "")
  public String getUpdateUser() {
    return updateUser;
  }

  public void setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
  }

  public StroomStatsStoreDoc uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public StroomStatsStoreDoc version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StroomStatsStoreDoc stroomStatsStoreDoc = (StroomStatsStoreDoc) o;
    return Objects.equals(this.config, stroomStatsStoreDoc.config) &&
        Objects.equals(this.createTime, stroomStatsStoreDoc.createTime) &&
        Objects.equals(this.createTimeMs, stroomStatsStoreDoc.createTimeMs) &&
        Objects.equals(this.createUser, stroomStatsStoreDoc.createUser) &&
        Objects.equals(this.description, stroomStatsStoreDoc.description) &&
        Objects.equals(this.enabled, stroomStatsStoreDoc.enabled) &&
        Objects.equals(this.name, stroomStatsStoreDoc.name) &&
        Objects.equals(this.precision, stroomStatsStoreDoc.precision) &&
        Objects.equals(this.rollUpType, stroomStatsStoreDoc.rollUpType) &&
        Objects.equals(this.statisticType, stroomStatsStoreDoc.statisticType) &&
        Objects.equals(this.type, stroomStatsStoreDoc.type) &&
        Objects.equals(this.updateTime, stroomStatsStoreDoc.updateTime) &&
        Objects.equals(this.updateTimeMs, stroomStatsStoreDoc.updateTimeMs) &&
        Objects.equals(this.updateUser, stroomStatsStoreDoc.updateUser) &&
        Objects.equals(this.uuid, stroomStatsStoreDoc.uuid) &&
        Objects.equals(this.version, stroomStatsStoreDoc.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, createTime, createTimeMs, createUser, description, enabled, name, precision, rollUpType, statisticType, type, updateTime, updateTimeMs, updateUser, uuid, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StroomStatsStoreDoc {\n");
    
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createTimeMs: ").append(toIndentedString(createTimeMs)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    rollUpType: ").append(toIndentedString(rollUpType)).append("\n");
    sb.append("    statisticType: ").append(toIndentedString(statisticType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    updateTimeMs: ").append(toIndentedString(updateTimeMs)).append("\n");
    sb.append("    updateUser: ").append(toIndentedString(updateUser)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
