/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExplorerTreeFilter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FindExplorerNodeCriteria
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class FindExplorerNodeCriteria {
  @SerializedName("ensureVisible")
  private List<String> ensureVisible = null;

  @SerializedName("filter")
  private ExplorerTreeFilter filter = null;

  @SerializedName("minDepth")
  private Integer minDepth = null;

  @SerializedName("openItems")
  private List<String> openItems = null;

  @SerializedName("temporaryOpenedItems")
  private List<String> temporaryOpenedItems = null;

  public FindExplorerNodeCriteria ensureVisible(List<String> ensureVisible) {
    this.ensureVisible = ensureVisible;
    return this;
  }

  public FindExplorerNodeCriteria addEnsureVisibleItem(String ensureVisibleItem) {
    if (this.ensureVisible == null) {
      this.ensureVisible = new ArrayList<String>();
    }
    this.ensureVisible.add(ensureVisibleItem);
    return this;
  }

   /**
   * Get ensureVisible
   * @return ensureVisible
  **/
  @Schema(description = "")
  public List<String> getEnsureVisible() {
    return ensureVisible;
  }

  public void setEnsureVisible(List<String> ensureVisible) {
    this.ensureVisible = ensureVisible;
  }

  public FindExplorerNodeCriteria filter(ExplorerTreeFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(description = "")
  public ExplorerTreeFilter getFilter() {
    return filter;
  }

  public void setFilter(ExplorerTreeFilter filter) {
    this.filter = filter;
  }

  public FindExplorerNodeCriteria minDepth(Integer minDepth) {
    this.minDepth = minDepth;
    return this;
  }

   /**
   * Get minDepth
   * @return minDepth
  **/
  @Schema(description = "")
  public Integer getMinDepth() {
    return minDepth;
  }

  public void setMinDepth(Integer minDepth) {
    this.minDepth = minDepth;
  }

  public FindExplorerNodeCriteria openItems(List<String> openItems) {
    this.openItems = openItems;
    return this;
  }

  public FindExplorerNodeCriteria addOpenItemsItem(String openItemsItem) {
    if (this.openItems == null) {
      this.openItems = new ArrayList<String>();
    }
    this.openItems.add(openItemsItem);
    return this;
  }

   /**
   * Get openItems
   * @return openItems
  **/
  @Schema(description = "")
  public List<String> getOpenItems() {
    return openItems;
  }

  public void setOpenItems(List<String> openItems) {
    this.openItems = openItems;
  }

  public FindExplorerNodeCriteria temporaryOpenedItems(List<String> temporaryOpenedItems) {
    this.temporaryOpenedItems = temporaryOpenedItems;
    return this;
  }

  public FindExplorerNodeCriteria addTemporaryOpenedItemsItem(String temporaryOpenedItemsItem) {
    if (this.temporaryOpenedItems == null) {
      this.temporaryOpenedItems = new ArrayList<String>();
    }
    this.temporaryOpenedItems.add(temporaryOpenedItemsItem);
    return this;
  }

   /**
   * Get temporaryOpenedItems
   * @return temporaryOpenedItems
  **/
  @Schema(description = "")
  public List<String> getTemporaryOpenedItems() {
    return temporaryOpenedItems;
  }

  public void setTemporaryOpenedItems(List<String> temporaryOpenedItems) {
    this.temporaryOpenedItems = temporaryOpenedItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindExplorerNodeCriteria findExplorerNodeCriteria = (FindExplorerNodeCriteria) o;
    return Objects.equals(this.ensureVisible, findExplorerNodeCriteria.ensureVisible) &&
        Objects.equals(this.filter, findExplorerNodeCriteria.filter) &&
        Objects.equals(this.minDepth, findExplorerNodeCriteria.minDepth) &&
        Objects.equals(this.openItems, findExplorerNodeCriteria.openItems) &&
        Objects.equals(this.temporaryOpenedItems, findExplorerNodeCriteria.temporaryOpenedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ensureVisible, filter, minDepth, openItems, temporaryOpenedItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindExplorerNodeCriteria {\n");
    
    sb.append("    ensureVisible: ").append(toIndentedString(ensureVisible)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    minDepth: ").append(toIndentedString(minDepth)).append("\n");
    sb.append("    openItems: ").append(toIndentedString(openItems)).append("\n");
    sb.append("    temporaryOpenedItems: ").append(toIndentedString(temporaryOpenedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
