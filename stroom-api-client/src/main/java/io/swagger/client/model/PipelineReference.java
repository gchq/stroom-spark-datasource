/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PipelineReference
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class PipelineReference {
  @SerializedName("element")
  private String element = null;

  @SerializedName("feed")
  private DocRef feed = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("pipeline")
  private DocRef pipeline = null;

  @SerializedName("sourcePipeline")
  private DocRef sourcePipeline = null;

  @SerializedName("streamType")
  private String streamType = null;

  public PipelineReference element(String element) {
    this.element = element;
    return this;
  }

   /**
   * Get element
   * @return element
  **/
  @Schema(required = true, description = "")
  public String getElement() {
    return element;
  }

  public void setElement(String element) {
    this.element = element;
  }

  public PipelineReference feed(DocRef feed) {
    this.feed = feed;
    return this;
  }

   /**
   * Get feed
   * @return feed
  **/
  @Schema(required = true, description = "")
  public DocRef getFeed() {
    return feed;
  }

  public void setFeed(DocRef feed) {
    this.feed = feed;
  }

  public PipelineReference name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PipelineReference pipeline(DocRef pipeline) {
    this.pipeline = pipeline;
    return this;
  }

   /**
   * Get pipeline
   * @return pipeline
  **/
  @Schema(required = true, description = "")
  public DocRef getPipeline() {
    return pipeline;
  }

  public void setPipeline(DocRef pipeline) {
    this.pipeline = pipeline;
  }

  public PipelineReference sourcePipeline(DocRef sourcePipeline) {
    this.sourcePipeline = sourcePipeline;
    return this;
  }

   /**
   * Get sourcePipeline
   * @return sourcePipeline
  **/
  @Schema(description = "")
  public DocRef getSourcePipeline() {
    return sourcePipeline;
  }

  public void setSourcePipeline(DocRef sourcePipeline) {
    this.sourcePipeline = sourcePipeline;
  }

  public PipelineReference streamType(String streamType) {
    this.streamType = streamType;
    return this;
  }

   /**
   * Get streamType
   * @return streamType
  **/
  @Schema(required = true, description = "")
  public String getStreamType() {
    return streamType;
  }

  public void setStreamType(String streamType) {
    this.streamType = streamType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineReference pipelineReference = (PipelineReference) o;
    return Objects.equals(this.element, pipelineReference.element) &&
        Objects.equals(this.feed, pipelineReference.feed) &&
        Objects.equals(this.name, pipelineReference.name) &&
        Objects.equals(this.pipeline, pipelineReference.pipeline) &&
        Objects.equals(this.sourcePipeline, pipelineReference.sourcePipeline) &&
        Objects.equals(this.streamType, pipelineReference.streamType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(element, feed, name, pipeline, sourcePipeline, streamType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineReference {\n");
    
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    feed: ").append(toIndentedString(feed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    sourcePipeline: ").append(toIndentedString(sourcePipeline)).append("\n");
    sb.append("    streamType: ").append(toIndentedString(streamType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
