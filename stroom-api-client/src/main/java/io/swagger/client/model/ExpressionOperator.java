/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExpressionItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A logical addOperator term in a query expression tree
 */
@Schema(description = "A logical addOperator term in a query expression tree")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ExpressionOperator {
  @SerializedName("children")
  private List<ExpressionItem> children = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  /**
   * The logical addOperator type
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    AND("AND"),
    OR("OR"),
    NOT("NOT");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpEnum fromValue(String text) {
      for (OpEnum b : OpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OpEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("op")
  private OpEnum op = null;

  public ExpressionOperator children(List<ExpressionItem> children) {
    this.children = children;
    return this;
  }

  public ExpressionOperator addChildrenItem(ExpressionItem childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<ExpressionItem>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @Schema(description = "")
  public List<ExpressionItem> getChildren() {
    return children;
  }

  public void setChildren(List<ExpressionItem> children) {
    this.children = children;
  }

  public ExpressionOperator enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether this item in the expression tree is enabled or not
   * @return enabled
  **/
  @Schema(example = "true", description = "Whether this item in the expression tree is enabled or not")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ExpressionOperator op(OpEnum op) {
    this.op = op;
    return this;
  }

   /**
   * The logical addOperator type
   * @return op
  **/
  @Schema(required = true, description = "The logical addOperator type")
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionOperator expressionOperator = (ExpressionOperator) o;
    return Objects.equals(this.children, expressionOperator.children) &&
        Objects.equals(this.enabled, expressionOperator.enabled) &&
        Objects.equals(this.op, expressionOperator.op);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, enabled, op);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionOperator {\n");
    
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
