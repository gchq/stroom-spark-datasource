/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ComponentResultRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")

public class ComponentResultRequest {
  @SerializedName("componentId")
  private String componentId = null;

  /**
   * Gets or Sets fetch
   */
  @JsonAdapter(FetchEnum.Adapter.class)
  public enum FetchEnum {
    NONE("NONE"),
    CHANGES("CHANGES"),
    ALL("ALL");

    private String value;

    FetchEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FetchEnum fromValue(String text) {
      for (FetchEnum b : FetchEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FetchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FetchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FetchEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FetchEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("fetch")
  private FetchEnum fetch = null;

  @SerializedName("type")
  private String type = null;

  public ComponentResultRequest() {
    this.type = this.getClass().getSimpleName();
  }
  public ComponentResultRequest componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * The ID of the component that will receive the results corresponding to this ResultRequest
   * @return componentId
  **/
  @Schema(required = true, description = "The ID of the component that will receive the results corresponding to this ResultRequest")
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }

  public ComponentResultRequest fetch(FetchEnum fetch) {
    this.fetch = fetch;
    return this;
  }

   /**
   * Get fetch
   * @return fetch
  **/
  @Schema(description = "")
  public FetchEnum getFetch() {
    return fetch;
  }

  public void setFetch(FetchEnum fetch) {
    this.fetch = fetch;
  }

  public ComponentResultRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentResultRequest componentResultRequest = (ComponentResultRequest) o;
    return Objects.equals(this.componentId, componentResultRequest.componentId) &&
        Objects.equals(this.fetch, componentResultRequest.fetch) &&
        Objects.equals(this.type, componentResultRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentId, fetch, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentResultRequest {\n");
    
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    fetch: ").append(toIndentedString(fetch)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
