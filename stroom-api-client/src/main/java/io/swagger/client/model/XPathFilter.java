/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Rec;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * XPathFilter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class XPathFilter {
  @SerializedName("ignoreCase")
  private Boolean ignoreCase = null;

  /**
   * Gets or Sets matchType
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    EXISTS("EXISTS"),
    CONTAINS("CONTAINS"),
    EQUALS("EQUALS"),
    UNIQUE("UNIQUE");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchTypeEnum fromValue(String text) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MatchTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("matchType")
  private MatchTypeEnum matchType = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("uniqueValues")
  private Map<String, Rec> uniqueValues = null;

  @SerializedName("value")
  private String value = null;

  public XPathFilter ignoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
    return this;
  }

   /**
   * Get ignoreCase
   * @return ignoreCase
  **/
  @Schema(description = "")
  public Boolean isIgnoreCase() {
    return ignoreCase;
  }

  public void setIgnoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
  }

  public XPathFilter matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * Get matchType
   * @return matchType
  **/
  @Schema(description = "")
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }

  public XPathFilter path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public XPathFilter uniqueValues(Map<String, Rec> uniqueValues) {
    this.uniqueValues = uniqueValues;
    return this;
  }

  public XPathFilter putUniqueValuesItem(String key, Rec uniqueValuesItem) {
    if (this.uniqueValues == null) {
      this.uniqueValues = new HashMap<String, Rec>();
    }
    this.uniqueValues.put(key, uniqueValuesItem);
    return this;
  }

   /**
   * Get uniqueValues
   * @return uniqueValues
  **/
  @Schema(description = "")
  public Map<String, Rec> getUniqueValues() {
    return uniqueValues;
  }

  public void setUniqueValues(Map<String, Rec> uniqueValues) {
    this.uniqueValues = uniqueValues;
  }

  public XPathFilter value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @Schema(description = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XPathFilter xpathFilter = (XPathFilter) o;
    return Objects.equals(this.ignoreCase, xpathFilter.ignoreCase) &&
        Objects.equals(this.matchType, xpathFilter.matchType) &&
        Objects.equals(this.path, xpathFilter.path) &&
        Objects.equals(this.uniqueValues, xpathFilter.uniqueValues) &&
        Objects.equals(this.value, xpathFilter.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreCase, matchType, path, uniqueValues, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XPathFilter {\n");
    
    sb.append("    ignoreCase: ").append(toIndentedString(ignoreCase)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    uniqueValues: ").append(toIndentedString(uniqueValues)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
