/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AbstractField
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")

public class AbstractField {
  /**
   * Gets or Sets conditions
   */
  @JsonAdapter(ConditionsEnum.Adapter.class)
  public enum ConditionsEnum {
    CONTAINS("CONTAINS"),
    EQUALS("EQUALS"),
    GREATER_THAN("GREATER_THAN"),
    GREATER_THAN_OR_EQUAL_TO("GREATER_THAN_OR_EQUAL_TO"),
    LESS_THAN("LESS_THAN"),
    LESS_THAN_OR_EQUAL_TO("LESS_THAN_OR_EQUAL_TO"),
    BETWEEN("BETWEEN"),
    IN("IN"),
    IN_DICTIONARY("IN_DICTIONARY"),
    IN_FOLDER("IN_FOLDER"),
    IS_DOC_REF("IS_DOC_REF"),
    IS_NULL("IS_NULL"),
    IS_NOT_NULL("IS_NOT_NULL");

    private String value;

    ConditionsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ConditionsEnum fromValue(String text) {
      for (ConditionsEnum b : ConditionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ConditionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ConditionsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("conditions")
  private List<ConditionsEnum> conditions = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("queryable")
  private Boolean queryable = null;

  @SerializedName("type")
  private String type = null;

  public AbstractField() {
    this.type = this.getClass().getSimpleName();
  }
  public AbstractField conditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
    return this;
  }

  public AbstractField addConditionsItem(ConditionsEnum conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<ConditionsEnum>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Schema(description = "")
  public List<ConditionsEnum> getConditions() {
    return conditions;
  }

  public void setConditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
  }

  public AbstractField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AbstractField queryable(Boolean queryable) {
    this.queryable = queryable;
    return this;
  }

   /**
   * Get queryable
   * @return queryable
  **/
  @Schema(description = "")
  public Boolean isQueryable() {
    return queryable;
  }

  public void setQueryable(Boolean queryable) {
    this.queryable = queryable;
  }

  public AbstractField type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractField abstractField = (AbstractField) o;
    return Objects.equals(this.conditions, abstractField.conditions) &&
        Objects.equals(this.name, abstractField.name) &&
        Objects.equals(this.queryable, abstractField.queryable) &&
        Objects.equals(this.type, abstractField.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, name, queryable, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractField {\n");
    
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queryable: ").append(toIndentedString(queryable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
