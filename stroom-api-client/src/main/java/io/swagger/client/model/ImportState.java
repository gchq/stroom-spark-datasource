/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.Message;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ImportState
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class ImportState {
  @SerializedName("action")
  private Boolean action = null;

  @SerializedName("destPath")
  private String destPath = null;

  @SerializedName("docRef")
  private DocRef docRef = null;

  @SerializedName("enable")
  private Boolean enable = null;

  @SerializedName("enableTime")
  private Long enableTime = null;

  @SerializedName("messageList")
  private List<Message> messageList = null;

  @SerializedName("sourcePath")
  private String sourcePath = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NEW("NEW"),
    UPDATE("UPDATE"),
    EQUAL("EQUAL");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("updatedFieldList")
  private List<String> updatedFieldList = null;

  public ImportState action(Boolean action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @Schema(description = "")
  public Boolean isAction() {
    return action;
  }

  public void setAction(Boolean action) {
    this.action = action;
  }

  public ImportState destPath(String destPath) {
    this.destPath = destPath;
    return this;
  }

   /**
   * Get destPath
   * @return destPath
  **/
  @Schema(description = "")
  public String getDestPath() {
    return destPath;
  }

  public void setDestPath(String destPath) {
    this.destPath = destPath;
  }

  public ImportState docRef(DocRef docRef) {
    this.docRef = docRef;
    return this;
  }

   /**
   * Get docRef
   * @return docRef
  **/
  @Schema(description = "")
  public DocRef getDocRef() {
    return docRef;
  }

  public void setDocRef(DocRef docRef) {
    this.docRef = docRef;
  }

  public ImportState enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

   /**
   * Get enable
   * @return enable
  **/
  @Schema(description = "")
  public Boolean isEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }

  public ImportState enableTime(Long enableTime) {
    this.enableTime = enableTime;
    return this;
  }

   /**
   * Get enableTime
   * @return enableTime
  **/
  @Schema(description = "")
  public Long getEnableTime() {
    return enableTime;
  }

  public void setEnableTime(Long enableTime) {
    this.enableTime = enableTime;
  }

  public ImportState messageList(List<Message> messageList) {
    this.messageList = messageList;
    return this;
  }

  public ImportState addMessageListItem(Message messageListItem) {
    if (this.messageList == null) {
      this.messageList = new ArrayList<Message>();
    }
    this.messageList.add(messageListItem);
    return this;
  }

   /**
   * Get messageList
   * @return messageList
  **/
  @Schema(description = "")
  public List<Message> getMessageList() {
    return messageList;
  }

  public void setMessageList(List<Message> messageList) {
    this.messageList = messageList;
  }

  public ImportState sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

   /**
   * Get sourcePath
   * @return sourcePath
  **/
  @Schema(description = "")
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }

  public ImportState state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ImportState updatedFieldList(List<String> updatedFieldList) {
    this.updatedFieldList = updatedFieldList;
    return this;
  }

  public ImportState addUpdatedFieldListItem(String updatedFieldListItem) {
    if (this.updatedFieldList == null) {
      this.updatedFieldList = new ArrayList<String>();
    }
    this.updatedFieldList.add(updatedFieldListItem);
    return this;
  }

   /**
   * Get updatedFieldList
   * @return updatedFieldList
  **/
  @Schema(description = "")
  public List<String> getUpdatedFieldList() {
    return updatedFieldList;
  }

  public void setUpdatedFieldList(List<String> updatedFieldList) {
    this.updatedFieldList = updatedFieldList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportState importState = (ImportState) o;
    return Objects.equals(this.action, importState.action) &&
        Objects.equals(this.destPath, importState.destPath) &&
        Objects.equals(this.docRef, importState.docRef) &&
        Objects.equals(this.enable, importState.enable) &&
        Objects.equals(this.enableTime, importState.enableTime) &&
        Objects.equals(this.messageList, importState.messageList) &&
        Objects.equals(this.sourcePath, importState.sourcePath) &&
        Objects.equals(this.state, importState.state) &&
        Objects.equals(this.updatedFieldList, importState.updatedFieldList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, destPath, docRef, enable, enableTime, messageList, sourcePath, state, updatedFieldList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportState {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    destPath: ").append(toIndentedString(destPath)).append("\n");
    sb.append("    docRef: ").append(toIndentedString(docRef)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    enableTime: ").append(toIndentedString(enableTime)).append("\n");
    sb.append("    messageList: ").append(toIndentedString(messageList)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedFieldList: ").append(toIndentedString(updatedFieldList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
