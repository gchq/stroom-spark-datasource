/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IndexVolume;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * IndexShard
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class IndexShard {
  @SerializedName("commitDocumentCount")
  private Integer commitDocumentCount = null;

  @SerializedName("commitDurationMs")
  private Long commitDurationMs = null;

  @SerializedName("commitMs")
  private Long commitMs = null;

  @SerializedName("documentCount")
  private Integer documentCount = null;

  @SerializedName("fileSize")
  private Long fileSize = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("indexUuid")
  private String indexUuid = null;

  @SerializedName("indexVersion")
  private String indexVersion = null;

  @SerializedName("nodeName")
  private String nodeName = null;

  @SerializedName("partition")
  private String partition = null;

  @SerializedName("partitionFromTime")
  private Long partitionFromTime = null;

  @SerializedName("partitionToTime")
  private Long partitionToTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CLOSED("CLOSED"),
    OPEN("OPEN"),
    CLOSING("CLOSING"),
    OPENING("OPENING"),
    NEW("NEW"),
    DELETED("DELETED"),
    CORRUPT("CORRUPT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("volume")
  private IndexVolume volume = null;

  public IndexShard commitDocumentCount(Integer commitDocumentCount) {
    this.commitDocumentCount = commitDocumentCount;
    return this;
  }

   /**
   * Get commitDocumentCount
   * @return commitDocumentCount
  **/
  @Schema(description = "")
  public Integer getCommitDocumentCount() {
    return commitDocumentCount;
  }

  public void setCommitDocumentCount(Integer commitDocumentCount) {
    this.commitDocumentCount = commitDocumentCount;
  }

  public IndexShard commitDurationMs(Long commitDurationMs) {
    this.commitDurationMs = commitDurationMs;
    return this;
  }

   /**
   * Get commitDurationMs
   * @return commitDurationMs
  **/
  @Schema(description = "")
  public Long getCommitDurationMs() {
    return commitDurationMs;
  }

  public void setCommitDurationMs(Long commitDurationMs) {
    this.commitDurationMs = commitDurationMs;
  }

  public IndexShard commitMs(Long commitMs) {
    this.commitMs = commitMs;
    return this;
  }

   /**
   * Get commitMs
   * @return commitMs
  **/
  @Schema(description = "")
  public Long getCommitMs() {
    return commitMs;
  }

  public void setCommitMs(Long commitMs) {
    this.commitMs = commitMs;
  }

  public IndexShard documentCount(Integer documentCount) {
    this.documentCount = documentCount;
    return this;
  }

   /**
   * Get documentCount
   * @return documentCount
  **/
  @Schema(description = "")
  public Integer getDocumentCount() {
    return documentCount;
  }

  public void setDocumentCount(Integer documentCount) {
    this.documentCount = documentCount;
  }

  public IndexShard fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Get fileSize
   * @return fileSize
  **/
  @Schema(description = "")
  public Long getFileSize() {
    return fileSize;
  }

  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }

  public IndexShard id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public IndexShard indexUuid(String indexUuid) {
    this.indexUuid = indexUuid;
    return this;
  }

   /**
   * Get indexUuid
   * @return indexUuid
  **/
  @Schema(description = "")
  public String getIndexUuid() {
    return indexUuid;
  }

  public void setIndexUuid(String indexUuid) {
    this.indexUuid = indexUuid;
  }

  public IndexShard indexVersion(String indexVersion) {
    this.indexVersion = indexVersion;
    return this;
  }

   /**
   * Get indexVersion
   * @return indexVersion
  **/
  @Schema(description = "")
  public String getIndexVersion() {
    return indexVersion;
  }

  public void setIndexVersion(String indexVersion) {
    this.indexVersion = indexVersion;
  }

  public IndexShard nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public IndexShard partition(String partition) {
    this.partition = partition;
    return this;
  }

   /**
   * Get partition
   * @return partition
  **/
  @Schema(description = "")
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }

  public IndexShard partitionFromTime(Long partitionFromTime) {
    this.partitionFromTime = partitionFromTime;
    return this;
  }

   /**
   * Get partitionFromTime
   * @return partitionFromTime
  **/
  @Schema(description = "")
  public Long getPartitionFromTime() {
    return partitionFromTime;
  }

  public void setPartitionFromTime(Long partitionFromTime) {
    this.partitionFromTime = partitionFromTime;
  }

  public IndexShard partitionToTime(Long partitionToTime) {
    this.partitionToTime = partitionToTime;
    return this;
  }

   /**
   * Get partitionToTime
   * @return partitionToTime
  **/
  @Schema(description = "")
  public Long getPartitionToTime() {
    return partitionToTime;
  }

  public void setPartitionToTime(Long partitionToTime) {
    this.partitionToTime = partitionToTime;
  }

  public IndexShard status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public IndexShard volume(IndexVolume volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @Schema(description = "")
  public IndexVolume getVolume() {
    return volume;
  }

  public void setVolume(IndexVolume volume) {
    this.volume = volume;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexShard indexShard = (IndexShard) o;
    return Objects.equals(this.commitDocumentCount, indexShard.commitDocumentCount) &&
        Objects.equals(this.commitDurationMs, indexShard.commitDurationMs) &&
        Objects.equals(this.commitMs, indexShard.commitMs) &&
        Objects.equals(this.documentCount, indexShard.documentCount) &&
        Objects.equals(this.fileSize, indexShard.fileSize) &&
        Objects.equals(this.id, indexShard.id) &&
        Objects.equals(this.indexUuid, indexShard.indexUuid) &&
        Objects.equals(this.indexVersion, indexShard.indexVersion) &&
        Objects.equals(this.nodeName, indexShard.nodeName) &&
        Objects.equals(this.partition, indexShard.partition) &&
        Objects.equals(this.partitionFromTime, indexShard.partitionFromTime) &&
        Objects.equals(this.partitionToTime, indexShard.partitionToTime) &&
        Objects.equals(this.status, indexShard.status) &&
        Objects.equals(this.volume, indexShard.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitDocumentCount, commitDurationMs, commitMs, documentCount, fileSize, id, indexUuid, indexVersion, nodeName, partition, partitionFromTime, partitionToTime, status, volume);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexShard {\n");
    
    sb.append("    commitDocumentCount: ").append(toIndentedString(commitDocumentCount)).append("\n");
    sb.append("    commitDurationMs: ").append(toIndentedString(commitDurationMs)).append("\n");
    sb.append("    commitMs: ").append(toIndentedString(commitMs)).append("\n");
    sb.append("    documentCount: ").append(toIndentedString(documentCount)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    indexUuid: ").append(toIndentedString(indexUuid)).append("\n");
    sb.append("    indexVersion: ").append(toIndentedString(indexVersion)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    partitionFromTime: ").append(toIndentedString(partitionFromTime)).append("\n");
    sb.append("    partitionToTime: ").append(toIndentedString(partitionToTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
