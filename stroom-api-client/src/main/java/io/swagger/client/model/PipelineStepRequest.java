/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocRef;
import io.swagger.client.model.FindMetaCriteria;
import io.swagger.client.model.StepLocation;
import io.swagger.client.model.SteppingFilterSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * PipelineStepRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class PipelineStepRequest {
  @SerializedName("childStreamType")
  private String childStreamType = null;

  @SerializedName("code")
  private Map<String, String> code = null;

  @SerializedName("criteria")
  private FindMetaCriteria criteria = null;

  @SerializedName("pipeline")
  private DocRef pipeline = null;

  @SerializedName("stepFilterMap")
  private Map<String, SteppingFilterSettings> stepFilterMap = null;

  @SerializedName("stepLocation")
  private StepLocation stepLocation = null;

  @SerializedName("stepSize")
  private Integer stepSize = null;

  /**
   * Gets or Sets stepType
   */
  @JsonAdapter(StepTypeEnum.Adapter.class)
  public enum StepTypeEnum {
    FIRST("FIRST"),
    FORWARD("FORWARD"),
    BACKWARD("BACKWARD"),
    LAST("LAST"),
    REFRESH("REFRESH");

    private String value;

    StepTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StepTypeEnum fromValue(String text) {
      for (StepTypeEnum b : StepTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StepTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StepTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("stepType")
  private StepTypeEnum stepType = null;

  public PipelineStepRequest childStreamType(String childStreamType) {
    this.childStreamType = childStreamType;
    return this;
  }

   /**
   * Get childStreamType
   * @return childStreamType
  **/
  @Schema(description = "")
  public String getChildStreamType() {
    return childStreamType;
  }

  public void setChildStreamType(String childStreamType) {
    this.childStreamType = childStreamType;
  }

  public PipelineStepRequest code(Map<String, String> code) {
    this.code = code;
    return this;
  }

  public PipelineStepRequest putCodeItem(String key, String codeItem) {
    if (this.code == null) {
      this.code = new HashMap<String, String>();
    }
    this.code.put(key, codeItem);
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @Schema(description = "")
  public Map<String, String> getCode() {
    return code;
  }

  public void setCode(Map<String, String> code) {
    this.code = code;
  }

  public PipelineStepRequest criteria(FindMetaCriteria criteria) {
    this.criteria = criteria;
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @Schema(description = "")
  public FindMetaCriteria getCriteria() {
    return criteria;
  }

  public void setCriteria(FindMetaCriteria criteria) {
    this.criteria = criteria;
  }

  public PipelineStepRequest pipeline(DocRef pipeline) {
    this.pipeline = pipeline;
    return this;
  }

   /**
   * Get pipeline
   * @return pipeline
  **/
  @Schema(description = "")
  public DocRef getPipeline() {
    return pipeline;
  }

  public void setPipeline(DocRef pipeline) {
    this.pipeline = pipeline;
  }

  public PipelineStepRequest stepFilterMap(Map<String, SteppingFilterSettings> stepFilterMap) {
    this.stepFilterMap = stepFilterMap;
    return this;
  }

  public PipelineStepRequest putStepFilterMapItem(String key, SteppingFilterSettings stepFilterMapItem) {
    if (this.stepFilterMap == null) {
      this.stepFilterMap = new HashMap<String, SteppingFilterSettings>();
    }
    this.stepFilterMap.put(key, stepFilterMapItem);
    return this;
  }

   /**
   * Get stepFilterMap
   * @return stepFilterMap
  **/
  @Schema(description = "")
  public Map<String, SteppingFilterSettings> getStepFilterMap() {
    return stepFilterMap;
  }

  public void setStepFilterMap(Map<String, SteppingFilterSettings> stepFilterMap) {
    this.stepFilterMap = stepFilterMap;
  }

  public PipelineStepRequest stepLocation(StepLocation stepLocation) {
    this.stepLocation = stepLocation;
    return this;
  }

   /**
   * Get stepLocation
   * @return stepLocation
  **/
  @Schema(description = "")
  public StepLocation getStepLocation() {
    return stepLocation;
  }

  public void setStepLocation(StepLocation stepLocation) {
    this.stepLocation = stepLocation;
  }

  public PipelineStepRequest stepSize(Integer stepSize) {
    this.stepSize = stepSize;
    return this;
  }

   /**
   * Get stepSize
   * @return stepSize
  **/
  @Schema(description = "")
  public Integer getStepSize() {
    return stepSize;
  }

  public void setStepSize(Integer stepSize) {
    this.stepSize = stepSize;
  }

  public PipelineStepRequest stepType(StepTypeEnum stepType) {
    this.stepType = stepType;
    return this;
  }

   /**
   * Get stepType
   * @return stepType
  **/
  @Schema(description = "")
  public StepTypeEnum getStepType() {
    return stepType;
  }

  public void setStepType(StepTypeEnum stepType) {
    this.stepType = stepType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineStepRequest pipelineStepRequest = (PipelineStepRequest) o;
    return Objects.equals(this.childStreamType, pipelineStepRequest.childStreamType) &&
        Objects.equals(this.code, pipelineStepRequest.code) &&
        Objects.equals(this.criteria, pipelineStepRequest.criteria) &&
        Objects.equals(this.pipeline, pipelineStepRequest.pipeline) &&
        Objects.equals(this.stepFilterMap, pipelineStepRequest.stepFilterMap) &&
        Objects.equals(this.stepLocation, pipelineStepRequest.stepLocation) &&
        Objects.equals(this.stepSize, pipelineStepRequest.stepSize) &&
        Objects.equals(this.stepType, pipelineStepRequest.stepType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childStreamType, code, criteria, pipeline, stepFilterMap, stepLocation, stepSize, stepType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineStepRequest {\n");
    
    sb.append("    childStreamType: ").append(toIndentedString(childStreamType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    stepFilterMap: ").append(toIndentedString(stepFilterMap)).append("\n");
    sb.append("    stepLocation: ").append(toIndentedString(stepLocation)).append("\n");
    sb.append("    stepSize: ").append(toIndentedString(stepSize)).append("\n");
    sb.append("    stepType: ").append(toIndentedString(stepType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
