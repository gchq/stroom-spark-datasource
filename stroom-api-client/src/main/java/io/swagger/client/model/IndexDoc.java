/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IndexField;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * IndexDoc
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class IndexDoc {
  @SerializedName("createTime")
  private Long createTime = null;

  @SerializedName("createTimeMs")
  private Long createTimeMs = null;

  @SerializedName("createUser")
  private String createUser = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("fields")
  private List<IndexField> fields = null;

  @SerializedName("maxDocsPerShard")
  private Integer maxDocsPerShard = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets partitionBy
   */
  @JsonAdapter(PartitionByEnum.Adapter.class)
  public enum PartitionByEnum {
    DAY("DAY"),
    WEEK("WEEK"),
    MONTH("MONTH"),
    YEAR("YEAR");

    private String value;

    PartitionByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PartitionByEnum fromValue(String text) {
      for (PartitionByEnum b : PartitionByEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PartitionByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartitionByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartitionByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PartitionByEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("partitionBy")
  private PartitionByEnum partitionBy = null;

  @SerializedName("partitionSize")
  private Integer partitionSize = null;

  @SerializedName("retentionDayAge")
  private Integer retentionDayAge = null;

  @SerializedName("shardsPerPartition")
  private Integer shardsPerPartition = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("updateTime")
  private Long updateTime = null;

  @SerializedName("updateTimeMs")
  private Long updateTimeMs = null;

  @SerializedName("updateUser")
  private String updateUser = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("volumeGroupName")
  private String volumeGroupName = null;

  public IndexDoc createTime(Long createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Long getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }

  public IndexDoc createTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
    return this;
  }

   /**
   * Get createTimeMs
   * @return createTimeMs
  **/
  @Schema(description = "")
  public Long getCreateTimeMs() {
    return createTimeMs;
  }

  public void setCreateTimeMs(Long createTimeMs) {
    this.createTimeMs = createTimeMs;
  }

  public IndexDoc createUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

   /**
   * Get createUser
   * @return createUser
  **/
  @Schema(description = "")
  public String getCreateUser() {
    return createUser;
  }

  public void setCreateUser(String createUser) {
    this.createUser = createUser;
  }

  public IndexDoc description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IndexDoc fields(List<IndexField> fields) {
    this.fields = fields;
    return this;
  }

  public IndexDoc addFieldsItem(IndexField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<IndexField>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Schema(description = "")
  public List<IndexField> getFields() {
    return fields;
  }

  public void setFields(List<IndexField> fields) {
    this.fields = fields;
  }

  public IndexDoc maxDocsPerShard(Integer maxDocsPerShard) {
    this.maxDocsPerShard = maxDocsPerShard;
    return this;
  }

   /**
   * Get maxDocsPerShard
   * @return maxDocsPerShard
  **/
  @Schema(description = "")
  public Integer getMaxDocsPerShard() {
    return maxDocsPerShard;
  }

  public void setMaxDocsPerShard(Integer maxDocsPerShard) {
    this.maxDocsPerShard = maxDocsPerShard;
  }

  public IndexDoc name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IndexDoc partitionBy(PartitionByEnum partitionBy) {
    this.partitionBy = partitionBy;
    return this;
  }

   /**
   * Get partitionBy
   * @return partitionBy
  **/
  @Schema(description = "")
  public PartitionByEnum getPartitionBy() {
    return partitionBy;
  }

  public void setPartitionBy(PartitionByEnum partitionBy) {
    this.partitionBy = partitionBy;
  }

  public IndexDoc partitionSize(Integer partitionSize) {
    this.partitionSize = partitionSize;
    return this;
  }

   /**
   * Get partitionSize
   * @return partitionSize
  **/
  @Schema(description = "")
  public Integer getPartitionSize() {
    return partitionSize;
  }

  public void setPartitionSize(Integer partitionSize) {
    this.partitionSize = partitionSize;
  }

  public IndexDoc retentionDayAge(Integer retentionDayAge) {
    this.retentionDayAge = retentionDayAge;
    return this;
  }

   /**
   * Get retentionDayAge
   * @return retentionDayAge
  **/
  @Schema(description = "")
  public Integer getRetentionDayAge() {
    return retentionDayAge;
  }

  public void setRetentionDayAge(Integer retentionDayAge) {
    this.retentionDayAge = retentionDayAge;
  }

  public IndexDoc shardsPerPartition(Integer shardsPerPartition) {
    this.shardsPerPartition = shardsPerPartition;
    return this;
  }

   /**
   * Get shardsPerPartition
   * @return shardsPerPartition
  **/
  @Schema(description = "")
  public Integer getShardsPerPartition() {
    return shardsPerPartition;
  }

  public void setShardsPerPartition(Integer shardsPerPartition) {
    this.shardsPerPartition = shardsPerPartition;
  }

  public IndexDoc type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public IndexDoc updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }

  public IndexDoc updateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
    return this;
  }

   /**
   * Get updateTimeMs
   * @return updateTimeMs
  **/
  @Schema(description = "")
  public Long getUpdateTimeMs() {
    return updateTimeMs;
  }

  public void setUpdateTimeMs(Long updateTimeMs) {
    this.updateTimeMs = updateTimeMs;
  }

  public IndexDoc updateUser(String updateUser) {
    this.updateUser = updateUser;
    return this;
  }

   /**
   * Get updateUser
   * @return updateUser
  **/
  @Schema(description = "")
  public String getUpdateUser() {
    return updateUser;
  }

  public void setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
  }

  public IndexDoc uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public IndexDoc version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public IndexDoc volumeGroupName(String volumeGroupName) {
    this.volumeGroupName = volumeGroupName;
    return this;
  }

   /**
   * Get volumeGroupName
   * @return volumeGroupName
  **/
  @Schema(description = "")
  public String getVolumeGroupName() {
    return volumeGroupName;
  }

  public void setVolumeGroupName(String volumeGroupName) {
    this.volumeGroupName = volumeGroupName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexDoc indexDoc = (IndexDoc) o;
    return Objects.equals(this.createTime, indexDoc.createTime) &&
        Objects.equals(this.createTimeMs, indexDoc.createTimeMs) &&
        Objects.equals(this.createUser, indexDoc.createUser) &&
        Objects.equals(this.description, indexDoc.description) &&
        Objects.equals(this.fields, indexDoc.fields) &&
        Objects.equals(this.maxDocsPerShard, indexDoc.maxDocsPerShard) &&
        Objects.equals(this.name, indexDoc.name) &&
        Objects.equals(this.partitionBy, indexDoc.partitionBy) &&
        Objects.equals(this.partitionSize, indexDoc.partitionSize) &&
        Objects.equals(this.retentionDayAge, indexDoc.retentionDayAge) &&
        Objects.equals(this.shardsPerPartition, indexDoc.shardsPerPartition) &&
        Objects.equals(this.type, indexDoc.type) &&
        Objects.equals(this.updateTime, indexDoc.updateTime) &&
        Objects.equals(this.updateTimeMs, indexDoc.updateTimeMs) &&
        Objects.equals(this.updateUser, indexDoc.updateUser) &&
        Objects.equals(this.uuid, indexDoc.uuid) &&
        Objects.equals(this.version, indexDoc.version) &&
        Objects.equals(this.volumeGroupName, indexDoc.volumeGroupName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, createTimeMs, createUser, description, fields, maxDocsPerShard, name, partitionBy, partitionSize, retentionDayAge, shardsPerPartition, type, updateTime, updateTimeMs, updateUser, uuid, version, volumeGroupName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexDoc {\n");
    
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createTimeMs: ").append(toIndentedString(createTimeMs)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    maxDocsPerShard: ").append(toIndentedString(maxDocsPerShard)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partitionBy: ").append(toIndentedString(partitionBy)).append("\n");
    sb.append("    partitionSize: ").append(toIndentedString(partitionSize)).append("\n");
    sb.append("    retentionDayAge: ").append(toIndentedString(retentionDayAge)).append("\n");
    sb.append("    shardsPerPartition: ").append(toIndentedString(shardsPerPartition)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    updateTimeMs: ").append(toIndentedString(updateTimeMs)).append("\n");
    sb.append("    updateUser: ").append(toIndentedString(updateUser)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    volumeGroupName: ").append(toIndentedString(volumeGroupName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
