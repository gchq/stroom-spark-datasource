/*
 * Stroom API
 * Various APIs for interacting with Stroom and its data
 *
 * OpenAPI spec version: v1/v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * GetFeedStatusResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-13T17:13:49.037+01:00[Europe/London]")
public class GetFeedStatusResponse {
  @SerializedName("message")
  private String message = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RECEIVE("Receive"),
    REJECT("Reject"),
    DROP("Drop");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Gets or Sets stroomStatusCode
   */
  @JsonAdapter(StroomStatusCodeEnum.Adapter.class)
  public enum StroomStatusCodeEnum {
    _200_0_OK("200 - 0 - OK"),
    _406_100_FEED_MUST_BE_SPECIFIED("406 - 100 - Feed must be specified"),
    _406_101_FEED_IS_NOT_DEFINED("406 - 101 - Feed is not defined"),
    _406_110_FEED_IS_NOT_SET_TO_RECEIVE_DATA("406 - 110 - Feed is not set to receive data"),
    _406_120_UNEXPECTED_DATA_TYPE("406 - 120 - Unexpected data type"),
    _406_200_UNKNOWN_COMPRESSION("406 - 200 - Unknown compression"),
    _401_300_CLIENT_CERTIFICATE_REQUIRED("401 - 300 - Client Certificate Required"),
    _403_310_CLIENT_CERTIFICATE_NOT_AUTHORISED("403 - 310 - Client Certificate not authorised"),
    _500_400_COMPRESSED_STREAM_INVALID("500 - 400 - Compressed stream invalid"),
    _500_999_UNKNOWN_ERROR("500 - 999 - Unknown error");

    private String value;

    StroomStatusCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StroomStatusCodeEnum fromValue(String text) {
      for (StroomStatusCodeEnum b : StroomStatusCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StroomStatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StroomStatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StroomStatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StroomStatusCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("stroomStatusCode")
  private StroomStatusCodeEnum stroomStatusCode = null;

  public GetFeedStatusResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public GetFeedStatusResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public GetFeedStatusResponse stroomStatusCode(StroomStatusCodeEnum stroomStatusCode) {
    this.stroomStatusCode = stroomStatusCode;
    return this;
  }

   /**
   * Get stroomStatusCode
   * @return stroomStatusCode
  **/
  @Schema(description = "")
  public StroomStatusCodeEnum getStroomStatusCode() {
    return stroomStatusCode;
  }

  public void setStroomStatusCode(StroomStatusCodeEnum stroomStatusCode) {
    this.stroomStatusCode = stroomStatusCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFeedStatusResponse getFeedStatusResponse = (GetFeedStatusResponse) o;
    return Objects.equals(this.message, getFeedStatusResponse.message) &&
        Objects.equals(this.status, getFeedStatusResponse.status) &&
        Objects.equals(this.stroomStatusCode, getFeedStatusResponse.stroomStatusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, status, stroomStatusCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFeedStatusResponse {\n");
    
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stroomStatusCode: ").append(toIndentedString(stroomStatusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
